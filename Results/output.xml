<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on darwin)" generated="20210207 23:11:15.210" rpa="false">
<suite id="s1" name="Tests" source="/Users/shraddhapulse/PycharmProjects/ApiTesting/tests">
<suite id="s1-s1" name="PostApiTest" source="/Users/shraddhapulse/PycharmProjects/ApiTesting/tests/PostApiTest.robot">
<kw name="Suite Setup" library="Common" type="setup">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>${BASE_URL}</arg>
</arguments>
<msg timestamp="20210207 23:11:15.559" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210207 23:11:15.558" endtime="20210207 23:11:15.559"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.558" endtime="20210207 23:11:15.559"></status>
</kw>
<test id="s1-s1-t1" name="To verify all posts for all users and validate response fields">
<kw name="Get API Response For Post Route" library="GetPostApi">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:15.642" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/ 
 path_url=/posts/ 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:15.642" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/ 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Set-Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475; expires=Wed, 10-Mar-21 04:11:15 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1605003709', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"6b80-Ybsq/K6GwwqrYkAsFxqDXGC7DoM"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '2769', 'cf-request-id': '08216f39360000ea0802117000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=2dRH4%2FrCwa7agPM53EVCqvOrAH1LmBJRGaCPOxwp9frEF49gsa4YOL2ocWMIq1L389tGPmZFQpNsO4dDDh9DnodXlEuPUDvttCqqu3LZCK%2Bg3iq5EGrdPkar5STd"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e2816ebbe0ea08-IAD'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  },
  {
    "userId": 1,
    "id": 2,
    "title": "qui est esse",
    "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
  },
  {
    "userId": 1,
    "id": 3,
    "title": "ea molestias quasi exercitationem repellat qui ipsa sit aut",
    "body": "et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accusantium quis pariatur\nmolestiae porro eius odio et labore et velit aut"
  },
  {
    "userId": 1,
    "id": 4,
    "title": "eum et est occaecati",
    "body": "ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\nquis sunt voluptatem rerum illo velit"
  },
  {
    "userId": 1,
    "id": 5,
    "title": "nesciunt quas odio",
    "body": "repudiandae veniam quaerat sunt sed\nalias aut fugiat sit autem sed est\nvoluptatem omnis possimus esse voluptatibus quis\nest aut tenetur dolor neque"
  },
  {
    "userId": 1,
    "id": 6,
    "title": "dolorem eum magni eos aperiam quia",
    "body": "ut aspernatur corporis harum nihil quis provident sequi\nmollitia nobis aliquid molestiae\nperspiciatis et ea nemo ab reprehenderit accusantium quas\nvoluptate dolores velit et doloremque molestiae"
  },
  {
    "userId": 1,
    "id": 7,
    "title": "magnam facilis autem",
    "body": "dolore placeat quibusdam ea quo vitae\nmagni quis enim qui quis quo nemo aut saepe\nquidem repellat excepturi ut quia\nsunt ut sequi eos ea sed quas"
  },
  {
    "userId": 1,
    "id": 8,
    "title": "dolorem dolore est ipsam",
    "body": "dignissimos aperiam dolorem qui eum\nfacilis quibusdam animi sint suscipit qui sint possimus cum\nquaerat magni maiores excepturi\nipsam ut commodi dolor voluptatum modi aut vitae"
  },
  {
    "userId": 1,
    "id": 9,
    "title": "nesciunt iure omnis dolorem tempora et accusantium",
    "body": "consectetur animi nesciunt iure dolore\nenim quia ad\nveniam autem ut quam aut nobis\net est aut quod aut provident voluptas autem voluptas"
  },
  {
    "userId": 1,
    "id": 10,
    "title": "optio molestias id quia eum",
    "body": "quo et expedita modi cum officia vel magni\ndoloribus qui repudiandae\nvero nisi sit\nquos veniam quod sed accusamus veritatis error"
  },
  {
    "userId": 2,
    "id": 11,
    "title": "et ea vero quia laudantium autem",
    "body": "delectus reiciendis molestiae occaecati non minima eveniet qui voluptatibus\naccusamus in eum beatae sit\nvel qui neque voluptates ut commodi qui incidunt\nut animi commodi"
  },
  {
    "userId": 2,
    "id": 12,
    "title": "in quibusdam tempore odit est dolorem",
    "body": "itaque id aut magnam\npraesentium quia et ea odit et ea voluptas et\nsapiente quia nihil amet occaecati quia id voluptatem\nincidunt ea est distinctio odio"
  },
  {
    "userId": 2,
    "id": 13,
    "title": "dolorum ut in voluptas mollitia et saepe quo animi",
    "body": "aut dicta possimus sint mollitia voluptas commodi quo doloremque\niste corrupti reiciendis voluptatem eius rerum\nsit cumque quod eligendi laborum minima\nperferendis recusandae assumenda consectetur porro architecto ipsum ipsam"
  },
  {
    "userId": 2,
    "id": 14,
    "title": "voluptatem eligendi optio",
    "body": "fuga et accusamus dolorum perferendis illo voluptas\nnon doloremque neque facere\nad qui dolorum molestiae beatae\nsed aut voluptas totam sit illum"
  },
  {
    "userId": 2,
    "id": 15,
    "title": "eveniet quod temporibus",
    "body": "reprehenderit quos placeat\nvelit minima officia dolores impedit repudiandae molestiae nam\nvoluptas recusandae quis delectus\nofficiis harum fugiat vitae"
  },
  {
    "userId": 2,
    "id": 16,
    "title": "sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio",
    "body": "suscipit nam nisi quo aperiam aut\nasperiores eos fugit maiores voluptatibus quia\nvoluptatem quis ullam qui in alias quia est\nconsequatur magni mollitia accusamus ea nisi voluptate dicta"
  },
  {
    "userId": 2,
    "id": 17,
    "title": "fugit voluptas sed molestias voluptatem provident",
    "body": "eos voluptas et aut odit natus earum\naspernatur fuga molestiae ullam\ndeserunt ratione qui eos\nqui nihil ratione nemo velit ut aut id quo"
  },
  {
    "userId": 2,
    "id": 18,
    "title": "voluptate et itaque vero tempora molestiae",
    "body": "eveniet quo quis\nlaborum totam consequatur non dolor\nut et est repudiandae\nest voluptatem vel debitis et magnam"
  },
  {
    "userId": 2,
    "id": 19,
    "title": "adipisci placeat illum aut reiciendis qui",
    "body": "illum quis cupiditate provident sit magnam\nea sed aut omnis\nveniam maiores ullam consequatur atque\nadipisci quo iste expedita sit quos voluptas"
  },
  {
    "userId": 2,
    "id": 20,
    "title": "doloribus ad provident suscipit at",
    "body": "qui consequuntur ducimus possimus quisquam amet similique\nsuscipit porro ipsam amet\neos veritatis officiis exercitationem vel fugit aut necessitatibus totam\nomnis rerum consequatur expedita quidem cumque explicabo"
  },
  {
    "userId": 3,
    "id": 21,
    "title": "asperiores ea ipsam voluptatibus modi minima quia sint",
    "body": "repellat aliquid praesentium dolorem quo\nsed totam minus non itaque\nnihil labore molestiae sunt dolor eveniet hic recusandae veniam\ntempora et tenetur expedita sunt"
  },
  {
    "userId": 3,
    "id": 22,
    "title": "dolor sint quo a velit explicabo quia nam",
    "body": "eos qui et ipsum ipsam suscipit aut\nsed omnis non odio\nexpedita earum mollitia molestiae aut atque rem suscipit\nnam impedit esse"
  },
  {
    "userId": 3,
    "id": 23,
    "title": "maxime id vitae nihil numquam",
    "body": "veritatis unde neque eligendi\nquae quod architecto quo neque vitae\nest illo sit tempora doloremque fugit quod\net et vel beatae sequi ullam sed tenetur perspiciatis"
  },
  {
    "userId": 3,
    "id": 24,
    "title": "autem hic labore sunt dolores incidunt",
    "body": "enim et ex nulla\nomnis voluptas quia qui\nvoluptatem consequatur numquam aliquam sunt\ntotam recusandae id dignissimos aut sed asperiores deserunt"
  },
  {
    "userId": 3,
    "id": 25,
    "title": "rem alias distinctio quo quis",
    "body": "ullam consequatur ut\nomnis quis sit vel consequuntur\nipsa eligendi ipsum molestiae et omnis error nostrum\nmolestiae illo tempore quia et distinctio"
  },
  {
    "userId": 3,
    "id": 26,
    "title": "est et quae odit qui non",
    "body": "similique esse doloribus nihil accusamus\nomnis dolorem fuga consequuntur reprehenderit fugit recusandae temporibus\nperspiciatis cum ut laudantium\nomnis aut molestiae vel vero"
  },
  {
    "userId": 3,
    "id": 27,
    "title": "quasi id et eos tenetur aut quo autem",
    "body": "eum sed dolores ipsam sint possimus debitis occaecati\ndebitis qui qui et\nut placeat enim earum aut odit facilis\nconsequatur suscipit necessitatibus rerum sed inventore temporibus consequatur"
  },
  {
    "userId": 3,
    "id": 28,
    "title": "delectus ullam et corporis nulla voluptas sequi",
    "body": "non et quaerat ex quae ad maiores\nmaiores recusandae totam aut blanditiis mollitia quas illo\nut voluptatibus voluptatem\nsimilique nostrum eum"
  },
  {
    "userId": 3,
    "id": 29,
    "title": "iusto eius quod necessitatibus culpa ea",
    "body": "odit magnam ut saepe sed non qui\ntempora atque nihil\naccusamus illum doloribus illo dolor\neligendi repudiandae odit magni similique sed cum maiores"
  },
  {
    "userId": 3,
    "id": 30,
    "title": "a quo magni similique perferendis",
    "body": "alias dolor cumque\nimpedit blanditiis non eveniet odio maxime\nblanditiis amet eius quis tempora quia autem rem\na provident perspiciatis quia"
  },
  {
    "userId": 4,
    "id": 31,
    "title": "ullam ut quidem id aut vel consequuntur",
    "body": "debitis eius sed quibusdam non quis consectetur vitae\nimpedit ut qui consequatur sed aut in\nquidem sit nostrum et maiores adipisci atque\nquaerat voluptatem adipisci repudiandae"
  },
  {
    "userId": 4,
    "id": 32,
    "title": "doloremque illum aliquid sunt",
    "body": "deserunt eos nobis asperiores et hic\nest debitis repellat molestiae optio\nnihil ratione ut eos beatae quibusdam distinctio maiores\nearum voluptates et aut adipisci ea maiores voluptas maxime"
  },
  {
    "userId": 4,
    "id": 33,
    "title": "qui explicabo molestiae dolorem",
    "body": "rerum ut et numquam laborum odit est sit\nid qui sint in\nquasi tenetur tempore aperiam et quaerat qui in\nrerum officiis sequi cumque quod"
  },
  {
    "userId": 4,
    "id": 34,
    "title": "magnam ut rerum iure",
    "body": "ea velit perferendis earum ut voluptatem voluptate itaque iusto\ntotam pariatur in\nnemo voluptatem voluptatem autem magni tempora minima in\nest distinctio qui assumenda accusamus dignissimos officia nesciunt nobis"
  },
  {
    "userId": 4,
    "id": 35,
    "title": "id nihil consequatur molestias animi provident",
    "body": "nisi error delectus possimus ut eligendi vitae\nplaceat eos harum cupiditate facilis reprehenderit voluptatem beatae\nmodi ducimus quo illum voluptas eligendi\net nobis quia fugit"
  },
  {
    "userId": 4,
    "id": 36,
    "title": "fuga nam accusamus voluptas reiciendis itaque",
    "body": "ad mollitia et omnis minus architecto odit\nvoluptas doloremque maxime aut non ipsa qui alias veniam\nblanditiis culpa aut quia nihil cumque facere et occaecati\nqui aspernatur quia eaque ut aperiam inventore"
  },
  {
    "userId": 4,
    "id": 37,
    "title": "provident vel ut sit ratione est... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20210207 23:11:15.643" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.562" endtime="20210207 23:11:15.643"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:15.561" endtime="20210207 23:11:15.644"></status>
</kw>
<msg timestamp="20210207 23:11:15.644" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.561" endtime="20210207 23:11:15.644"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.645" endtime="20210207 23:11:15.646"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:15.648" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:15.646" endtime="20210207 23:11:15.648"></status>
</kw>
<msg timestamp="20210207 23:11:15.649" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:15.644" endtime="20210207 23:11:15.649"></status>
</kw>
<kw name="${postobject} IN [ @{jsonResponse} ]" type="for">
<kw name="${postobject} = {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.650" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.649" endtime="20210207 23:11:15.650"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.650" endtime="20210207 23:11:15.651"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.649" endtime="20210207 23:11:15.651"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 2, 'title': 'qui est esse', 'body': 'est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.651" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.651" endtime="20210207 23:11:15.651"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.652" endtime="20210207 23:11:15.652"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.651" endtime="20210207 23:11:15.652"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 3, 'title': 'ea molestias quasi exercitationem repellat qui ipsa sit aut', 'body': 'et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.653" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.652" endtime="20210207 23:11:15.653"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.653" endtime="20210207 23:11:15.654"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.652" endtime="20210207 23:11:15.654"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur do..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.654" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.654" endtime="20210207 23:11:15.654"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.655" endtime="20210207 23:11:15.655"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.654" endtime="20210207 23:11:15.655"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 5, 'title': 'nesciunt quas odio', 'body': 'repudiandae veniam quaerat sunt sed\nalias aut fugiat sit autem sed est\nvoluptatem omnis possimus esse voluptatibus quis\nest aut tenetu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.656" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.655" endtime="20210207 23:11:15.656"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.656" endtime="20210207 23:11:15.656"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.655" endtime="20210207 23:11:15.656"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'body': 'ut aspernatur corporis harum nihil quis provident sequi\nmollitia nobis aliquid molestiae\nperspiciatis et ea nemo ab rep..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.657" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.656" endtime="20210207 23:11:15.657"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.657" endtime="20210207 23:11:15.657"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.656" endtime="20210207 23:11:15.657"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 7, 'title': 'magnam facilis autem', 'body': 'dolore placeat quibusdam ea quo vitae\nmagni quis enim qui quis quo nemo aut saepe\nquidem repellat excepturi ut quia\nsunt ut sequi eo..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.658" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.658" endtime="20210207 23:11:15.658"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.658" endtime="20210207 23:11:15.659"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.657" endtime="20210207 23:11:15.659"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 8, 'title': 'dolorem dolore est ipsam', 'body': 'dignissimos aperiam dolorem qui eum\nfacilis quibusdam animi sint suscipit qui sint possimus cum\nquaerat magni maiores excepturi\n..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.659" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.659" endtime="20210207 23:11:15.659"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.660" endtime="20210207 23:11:15.660"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.659" endtime="20210207 23:11:15.660"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 9, 'title': 'nesciunt iure omnis dolorem tempora et accusantium', 'body': 'consectetur animi nesciunt iure dolore\nenim quia ad\nveniam autem ut quam aut nobis\net est aut quod aut..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.660" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.660" endtime="20210207 23:11:15.660"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.661" endtime="20210207 23:11:15.661"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.660" endtime="20210207 23:11:15.661"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 10, 'title': 'optio molestias id quia eum', 'body': 'quo et expedita modi cum officia vel magni\ndoloribus qui repudiandae\nvero nisi sit\nquos veniam quod sed accusamus veritatis ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.662" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.661" endtime="20210207 23:11:15.662"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.662" endtime="20210207 23:11:15.662"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.661" endtime="20210207 23:11:15.662"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 11, 'title': 'et ea vero quia laudantium autem', 'body': 'delectus reiciendis molestiae occaecati non minima eveniet qui voluptatibus\naccusamus in eum beatae sit\nvel qui neque vo..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.663" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.662" endtime="20210207 23:11:15.663"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.663" endtime="20210207 23:11:15.663"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.662" endtime="20210207 23:11:15.663"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 12, 'title': 'in quibusdam tempore odit est dolorem', 'body': 'itaque id aut magnam\npraesentium quia et ea odit et ea voluptas et\nsapiente quia nihil amet occaecati quia id volup..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.664" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.664" endtime="20210207 23:11:15.664"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.664" endtime="20210207 23:11:15.664"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.663" endtime="20210207 23:11:15.664"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 13, 'title': 'dolorum ut in voluptas mollitia et saepe quo animi', 'body': 'aut dicta possimus sint mollitia voluptas commodi quo doloremque\niste corrupti reiciendis voluptatem ei..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.665" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.665" endtime="20210207 23:11:15.665"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.665" endtime="20210207 23:11:15.665"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.664" endtime="20210207 23:11:15.665"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 14, 'title': 'voluptatem eligendi optio', 'body': 'fuga et accusamus dolorum perferendis illo voluptas\nnon doloremque neque facere\nad qui dolorum molestiae beatae\nsed aut volupt..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.666" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.666" endtime="20210207 23:11:15.666"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.666" endtime="20210207 23:11:15.666"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.665" endtime="20210207 23:11:15.666"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 15, 'title': 'eveniet quod temporibus', 'body': 'reprehenderit quos placeat\nvelit minima officia dolores impedit repudiandae molestiae nam\nvoluptas recusandae quis delectus\noffi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.667" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.666" endtime="20210207 23:11:15.667"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.667" endtime="20210207 23:11:15.667"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.666" endtime="20210207 23:11:15.667"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 16, 'title': 'sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio', 'body': 'suscipit nam nisi quo aperiam aut\nasperiores eos fugit maiores voluptatibus quia\nvolu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.668" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.667" endtime="20210207 23:11:15.668"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.668" endtime="20210207 23:11:15.668"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.667" endtime="20210207 23:11:15.668"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 17, 'title': 'fugit voluptas sed molestias voluptatem provident', 'body': 'eos voluptas et aut odit natus earum\naspernatur fuga molestiae ullam\ndeserunt ratione qui eos\nqui nihi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.669" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.668" endtime="20210207 23:11:15.669"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.669" endtime="20210207 23:11:15.669"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.668" endtime="20210207 23:11:15.669"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 18, 'title': 'voluptate et itaque vero tempora molestiae', 'body': 'eveniet quo quis\nlaborum totam consequatur non dolor\nut et est repudiandae\nest voluptatem vel debitis et magn..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.670" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.669" endtime="20210207 23:11:15.670"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.670" endtime="20210207 23:11:15.670"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.669" endtime="20210207 23:11:15.670"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 19, 'title': 'adipisci placeat illum aut reiciendis qui', 'body': 'illum quis cupiditate provident sit magnam\nea sed aut omnis\nveniam maiores ullam consequatur atque\nadipisci qu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.671" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.670" endtime="20210207 23:11:15.671"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.671" endtime="20210207 23:11:15.671"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.670" endtime="20210207 23:11:15.671"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 20, 'title': 'doloribus ad provident suscipit at', 'body': 'qui consequuntur ducimus possimus quisquam amet similique\nsuscipit porro ipsam amet\neos veritatis officiis exercitatio..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.671" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.671" endtime="20210207 23:11:15.671"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.672" endtime="20210207 23:11:15.672"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.671" endtime="20210207 23:11:15.672"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 21, 'title': 'asperiores ea ipsam voluptatibus modi minima quia sint', 'body': 'repellat aliquid praesentium dolorem quo\nsed totam minus non itaque\nnihil labore molestiae sunt do..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.672" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.672" endtime="20210207 23:11:15.672"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.673" endtime="20210207 23:11:15.673"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.672" endtime="20210207 23:11:15.673"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 22, 'title': 'dolor sint quo a velit explicabo quia nam', 'body': 'eos qui et ipsum ipsam suscipit aut\nsed omnis non odio\nexpedita earum mollitia molestiae aut atque rem suscipit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.673" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.673" endtime="20210207 23:11:15.673"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.674" endtime="20210207 23:11:15.674"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.673" endtime="20210207 23:11:15.674"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 23, 'title': 'maxime id vitae nihil numquam', 'body': 'veritatis unde neque eligendi\nquae quod architecto quo neque vitae\nest illo sit tempora doloremque fugit quod\net et vel be..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.674" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.674" endtime="20210207 23:11:15.674"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.674" endtime="20210207 23:11:15.675"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.674" endtime="20210207 23:11:15.675"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 24, 'title': 'autem hic labore sunt dolores incidunt', 'body': 'enim et ex nulla\nomnis voluptas quia qui\nvoluptatem consequatur numquam aliquam sunt\ntotam recusandae id dignissi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.675" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.675" endtime="20210207 23:11:15.675"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.675" endtime="20210207 23:11:15.675"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.675" endtime="20210207 23:11:15.676"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 25, 'title': 'rem alias distinctio quo quis', 'body': 'ullam consequatur ut\nomnis quis sit vel consequuntur\nipsa eligendi ipsum molestiae et omnis error nostrum\nmolestiae illo t..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.676" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.676" endtime="20210207 23:11:15.676"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.676" endtime="20210207 23:11:15.676"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.676" endtime="20210207 23:11:15.676"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 26, 'title': 'est et quae odit qui non', 'body': 'similique esse doloribus nihil accusamus\nomnis dolorem fuga consequuntur reprehenderit fugit recusandae temporibus\nperspiciatis ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.677" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.676" endtime="20210207 23:11:15.677"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.677" endtime="20210207 23:11:15.677"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.676" endtime="20210207 23:11:15.677"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 27, 'title': 'quasi id et eos tenetur aut quo autem', 'body': 'eum sed dolores ipsam sint possimus debitis occaecati\ndebitis qui qui et\nut placeat enim earum aut odit facilis\nco..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.677" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.677" endtime="20210207 23:11:15.678"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.678" endtime="20210207 23:11:15.678"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.677" endtime="20210207 23:11:15.678"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 28, 'title': 'delectus ullam et corporis nulla voluptas sequi', 'body': 'non et quaerat ex quae ad maiores\nmaiores recusandae totam aut blanditiis mollitia quas illo\nut voluptati..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.678" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.678" endtime="20210207 23:11:15.678"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.678" endtime="20210207 23:11:15.679"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.678" endtime="20210207 23:11:15.679"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 29, 'title': 'iusto eius quod necessitatibus culpa ea', 'body': 'odit magnam ut saepe sed non qui\ntempora atque nihil\naccusamus illum doloribus illo dolor\neligendi repudiandae o..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.679" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.679" endtime="20210207 23:11:15.679"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.679" endtime="20210207 23:11:15.679"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.679" endtime="20210207 23:11:15.680"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 30, 'title': 'a quo magni similique perferendis', 'body': 'alias dolor cumque\nimpedit blanditiis non eveniet odio maxime\nblanditiis amet eius quis tempora quia autem rem\na provi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.680" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.680" endtime="20210207 23:11:15.680"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.680" endtime="20210207 23:11:15.680"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.680" endtime="20210207 23:11:15.680"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 31, 'title': 'ullam ut quidem id aut vel consequuntur', 'body': 'debitis eius sed quibusdam non quis consectetur vitae\nimpedit ut qui consequatur sed aut in\nquidem sit nostrum et..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.681" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.680" endtime="20210207 23:11:15.681"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.681" endtime="20210207 23:11:15.681"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.680" endtime="20210207 23:11:15.681"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 32, 'title': 'doloremque illum aliquid sunt', 'body': 'deserunt eos nobis asperiores et hic\nest debitis repellat molestiae optio\nnihil ratione ut eos beatae quibusdam distinctio ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.681" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.681" endtime="20210207 23:11:15.682"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.682" endtime="20210207 23:11:15.682"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.681" endtime="20210207 23:11:15.682"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 33, 'title': 'qui explicabo molestiae dolorem', 'body': 'rerum ut et numquam laborum odit est sit\nid qui sint in\nquasi tenetur tempore aperiam et quaerat qui in\nrerum officiis s..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.682" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.682" endtime="20210207 23:11:15.682"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.682" endtime="20210207 23:11:15.683"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.682" endtime="20210207 23:11:15.683"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 34, 'title': 'magnam ut rerum iure', 'body': 'ea velit perferendis earum ut voluptatem voluptate itaque iusto\ntotam pariatur in\nnemo voluptatem voluptatem autem magni tempora min..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.683" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.683" endtime="20210207 23:11:15.683"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.683" endtime="20210207 23:11:15.683"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.683" endtime="20210207 23:11:15.683"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 35, 'title': 'id nihil consequatur molestias animi provident', 'body': 'nisi error delectus possimus ut eligendi vitae\nplaceat eos harum cupiditate facilis reprehenderit voluptate..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.684" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.684" endtime="20210207 23:11:15.684"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.684" endtime="20210207 23:11:15.684"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.684" endtime="20210207 23:11:15.684"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 36, 'title': 'fuga nam accusamus voluptas reiciendis itaque', 'body': 'ad mollitia et omnis minus architecto odit\nvoluptas doloremque maxime aut non ipsa qui alias veniam\nblandit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.685" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.685" endtime="20210207 23:11:15.685"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.685" endtime="20210207 23:11:15.685"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.684" endtime="20210207 23:11:15.685"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 37, 'title': 'provident vel ut sit ratione est', 'body': 'debitis et eaque non officia sed nesciunt pariatur vel\nvoluptatem iste vero et ea\nnumquam aut expedita ipsum nulla in\nv..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.686" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.685" endtime="20210207 23:11:15.686"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.686" endtime="20210207 23:11:15.686"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.685" endtime="20210207 23:11:15.686"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 38, 'title': 'explicabo et eos deleniti nostrum ab id repellendus', 'body': 'animi esse sit aut sit nesciunt assumenda eum voluptas\nquia voluptatibus provident quia necessitatibus..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.686" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.686" endtime="20210207 23:11:15.686"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.687" endtime="20210207 23:11:15.687"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.686" endtime="20210207 23:11:15.687"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 39, 'title': 'eos dolorem iste accusantium est eaque quam', 'body': 'corporis rerum ducimus vel eum accusantium\nmaxime aspernatur a porro possimus iste omnis\nest in deleniti aspe..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.687" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.687" endtime="20210207 23:11:15.687"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.687" endtime="20210207 23:11:15.688"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.687" endtime="20210207 23:11:15.688"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 40, 'title': 'enim quo cumque', 'body': 'ut voluptatum aliquid illo tenetur nemo sequi quo facilis\nipsum rem optio mollitia quas\nvoluptatem eum voluptas qui\nunde omnis voluptate..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.688" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.688" endtime="20210207 23:11:15.688"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.688" endtime="20210207 23:11:15.688"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.688" endtime="20210207 23:11:15.688"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 41, 'title': 'non est facere', 'body': 'molestias id nostrum\nexcepturi molestiae dolore omnis repellendus quaerat saepe\nconsectetur iste quaerat tenetur asperiores accusamus ex u..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.689" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.689" endtime="20210207 23:11:15.689"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.689" endtime="20210207 23:11:15.689"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.688" endtime="20210207 23:11:15.689"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 42, 'title': 'commodi ullam sint et excepturi error explicabo praesentium voluptas', 'body': 'odio fugit voluptatum ducimus earum autem est incidunt voluptatem\nodit reiciendis ali..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.689" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.689" endtime="20210207 23:11:15.690"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.690" endtime="20210207 23:11:15.690"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.689" endtime="20210207 23:11:15.690"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 43, 'title': 'eligendi iste nostrum consequuntur adipisci praesentium sit beatae perferendis', 'body': 'similique fugit est\nillum et dolorum harum et voluptate eaque quidem\nexerc..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.690" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.690" endtime="20210207 23:11:15.690"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.690" endtime="20210207 23:11:15.691"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.690" endtime="20210207 23:11:15.691"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 44, 'title': 'optio dolor molestias sit', 'body': 'temporibus est consectetur dolore\net libero debitis vel velit laboriosam quia\nipsum quibusdam qui itaque fuga rem aut\nea et iu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.691" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.691" endtime="20210207 23:11:15.691"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.691" endtime="20210207 23:11:15.692"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.691" endtime="20210207 23:11:15.692"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 45, 'title': 'ut numquam possimus omnis eius suscipit laudantium iure', 'body': 'est natus reiciendis nihil possimus aut provident\nex et dolor\nrepellat pariatur est\nnobis rerum ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.692" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.692" endtime="20210207 23:11:15.692"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.692" endtime="20210207 23:11:15.692"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.692" endtime="20210207 23:11:15.692"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 46, 'title': 'aut quo modi neque nostrum ducimus', 'body': 'voluptatem quisquam iste\nvoluptatibus natus officiis facilis dolorem\nquis quas ipsam\nvel et voluptatum in aliquid'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.693" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.692" endtime="20210207 23:11:15.693"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.693" endtime="20210207 23:11:15.693"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.692" endtime="20210207 23:11:15.693"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 47, 'title': 'quibusdam cumque rem aut deserunt', 'body': 'voluptatem assumenda ut qui ut cupiditate aut impedit veniam\noccaecati nemo illum voluptatem laudantium\nmolestiae beata..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.693" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.693" endtime="20210207 23:11:15.693"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.694" endtime="20210207 23:11:15.694"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.693" endtime="20210207 23:11:15.694"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 48, 'title': 'ut voluptatem illum ea doloribus itaque eos', 'body': 'voluptates quo voluptatem facilis iure occaecati\nvel assumenda rerum officia et\nillum perspiciatis ab delenit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.694" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.694" endtime="20210207 23:11:15.694"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.694" endtime="20210207 23:11:15.694"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.694" endtime="20210207 23:11:15.694"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 49, 'title': 'laborum non sunt aut ut assumenda perspiciatis voluptas', 'body': 'inventore ab sint\nnatus fugit id nulla sequi architecto nihil quaerat\neos tenetur in in eum verit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.695" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.695" endtime="20210207 23:11:15.695"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.695" endtime="20210207 23:11:15.695"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.695" endtime="20210207 23:11:15.695"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 50, 'title': 'repellendus qui recusandae incidunt voluptates tenetur qui omnis exercitationem', 'body': 'error suscipit maxime adipisci consequuntur recusandae\nvoluptas eligendi e..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.696" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.696" endtime="20210207 23:11:15.696"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.696" endtime="20210207 23:11:15.696"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.695" endtime="20210207 23:11:15.696"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 51, 'title': 'soluta aliquam aperiam consequatur illo quis voluptas', 'body': 'sunt dolores aut doloribus\ndolore doloribus voluptates tempora et\ndoloremque et quo\ncum asperiores..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.696" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.696" endtime="20210207 23:11:15.697"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.697" endtime="20210207 23:11:15.697"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.696" endtime="20210207 23:11:15.697"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 52, 'title': 'qui enim et consequuntur quia animi quis voluptate quibusdam', 'body': 'iusto est quibusdam fuga quas quaerat molestias\na enim ut sit accusamus enim\ntemporibus iust..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.697" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.697" endtime="20210207 23:11:15.697"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.697" endtime="20210207 23:11:15.698"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.697" endtime="20210207 23:11:15.698"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 53, 'title': 'ut quo aut ducimus alias', 'body': 'minima harum praesentium eum rerum illo dolore\nquasi exercitationem rerum nam\nporro quis neque quo\nconsequatur minus dolor quid..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.698" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.698" endtime="20210207 23:11:15.698"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.698" endtime="20210207 23:11:15.698"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.698" endtime="20210207 23:11:15.698"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 54, 'title': 'sit asperiores ipsam eveniet odio non quia', 'body': 'totam corporis dignissimos\nvitae dolorem ut occaecati accusamus\nex velit deserunt\net exercitationem vero inci..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.699" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.698" endtime="20210207 23:11:15.699"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.699" endtime="20210207 23:11:15.699"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.698" endtime="20210207 23:11:15.699"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 55, 'title': 'sit vel voluptatem et non libero', 'body': 'debitis excepturi ea perferendis harum libero optio\neos accusamus cum fuga ut sapiente repudiandae\net ut incidunt omnis ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.699" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.699" endtime="20210207 23:11:15.699"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.699" endtime="20210207 23:11:15.700"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.699" endtime="20210207 23:11:15.700"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 56, 'title': 'qui et at rerum necessitatibus', 'body': 'aut est omnis dolores\nneque rerum quod ea rerum velit pariatur beatae excepturi\net provident voluptas corrupti\ncorporis h..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.700" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.700" endtime="20210207 23:11:15.700"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.700" endtime="20210207 23:11:15.700"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.700" endtime="20210207 23:11:15.700"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 57, 'title': 'sed ab est est', 'body': 'at pariatur consequuntur earum quidem\nquo est laudantium soluta voluptatem\nqui ullam et est\net cum voluptas voluptatum repellat est'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.701" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.701" endtime="20210207 23:11:15.701"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.701" endtime="20210207 23:11:15.701"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.700" endtime="20210207 23:11:15.701"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 58, 'title': 'voluptatum itaque dolores nisi et quasi', 'body': 'veniam voluptatum quae adipisci id\net id quia eos ad et dolorem\naliquam quo nisi sunt eos impedit error\nad simil..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.702" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.701" endtime="20210207 23:11:15.702"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.702" endtime="20210207 23:11:15.702"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.701" endtime="20210207 23:11:15.702"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 59, 'title': 'qui commodi dolor at maiores et quis id accusantium', 'body': 'perspiciatis et quam ea autem temporibus non voluptatibus qui\nbeatae a earum officia nesciunt dolores ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.702" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.702" endtime="20210207 23:11:15.702"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.703" endtime="20210207 23:11:15.703"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.702" endtime="20210207 23:11:15.703"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 60, 'title': 'consequatur placeat omnis quisquam quia reprehenderit fugit veritatis facere', 'body': 'asperiores sunt ab assumenda cumque modi velit\nqui esse omnis\nvoluptate et f..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.703" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.703" endtime="20210207 23:11:15.703"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.703" endtime="20210207 23:11:15.703"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.703" endtime="20210207 23:11:15.704"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 61, 'title': 'voluptatem doloribus consectetur est ut ducimus', 'body': 'ab nemo optio odio\ndelectus tenetur corporis similique nobis repellendus rerum omnis facilis\nvero blandit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.704" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.704" endtime="20210207 23:11:15.704"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.704" endtime="20210207 23:11:15.704"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.704" endtime="20210207 23:11:15.704"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 62, 'title': 'beatae enim quia vel', 'body': 'enim aspernatur illo distinctio quae praesentium\nbeatae alias amet delectus qui voluptate distinctio\nodit sint accusantium autem omn..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.705" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.704" endtime="20210207 23:11:15.705"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.705" endtime="20210207 23:11:15.705"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.704" endtime="20210207 23:11:15.705"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 63, 'title': 'voluptas blanditiis repellendus animi ducimus error sapiente et suscipit', 'body': 'enim adipisci aspernatur nemo\nnumquam omnis facere dolorem dolor ex quis temporib..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.705" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.705" endtime="20210207 23:11:15.705"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.706" endtime="20210207 23:11:15.706"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.705" endtime="20210207 23:11:15.706"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 64, 'title': 'et fugit quas eum in in aperiam quod', 'body': 'id velit blanditiis\neum ea voluptatem\nmolestiae sint occaecati est eos perspiciatis\nincidunt a error provident eaqu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.706" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.706" endtime="20210207 23:11:15.706"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.706" endtime="20210207 23:11:15.707"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.706" endtime="20210207 23:11:15.707"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 65, 'title': 'consequatur id enim sunt et et', 'body': 'voluptatibus ex esse\nsint explicabo est aliquid cumque adipisci fuga repellat labore\nmolestiae corrupti ex saepe at asperi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.707" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.707" endtime="20210207 23:11:15.707"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.707" endtime="20210207 23:11:15.707"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.707" endtime="20210207 23:11:15.707"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 66, 'title': 'repudiandae ea animi iusto', 'body': 'officia veritatis tenetur vero qui itaque\nsint non ratione\nsed et ut asperiores iusto eos molestiae nostrum\nveritatis quibusd..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.708" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.707" endtime="20210207 23:11:15.708"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.708" endtime="20210207 23:11:15.708"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.707" endtime="20210207 23:11:15.708"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 67, 'title': 'aliquid eos sed fuga est maxime repellendus', 'body': 'reprehenderit id nostrum\nvoluptas doloremque pariatur sint et accusantium quia quod aspernatur\net fugiat amet..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.709" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.708" endtime="20210207 23:11:15.709"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.709" endtime="20210207 23:11:15.709"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.708" endtime="20210207 23:11:15.709"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 68, 'title': 'odio quis facere architecto reiciendis optio', 'body': 'magnam molestiae perferendis quisquam\nqui cum reiciendis\nquaerat animi amet hic inventore\nea quia deleniti ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.709" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.709" endtime="20210207 23:11:15.709"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.709" endtime="20210207 23:11:15.710"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.709" endtime="20210207 23:11:15.710"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 69, 'title': 'fugiat quod pariatur odit minima', 'body': 'officiis error culpa consequatur modi asperiores et\ndolorum assumenda voluptas et vel qui aut vel rerum\nvoluptatum quisq..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.710" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.710" endtime="20210207 23:11:15.710"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.710" endtime="20210207 23:11:15.710"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.710" endtime="20210207 23:11:15.710"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 70, 'title': 'voluptatem laborum magni', 'body': 'sunt repellendus quae\nest asperiores aut deleniti esse accusamus repellendus quia aut\nquia dolorem unde\neum tempora esse dolore..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.711" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.711" endtime="20210207 23:11:15.711"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.711" endtime="20210207 23:11:15.711"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.710" endtime="20210207 23:11:15.711"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 71, 'title': 'et iusto veniam et illum aut fuga', 'body': 'occaecati a doloribus\niste saepe consectetur placeat eum voluptate dolorem et\nqui quo quia voluptas\nrerum ut id enim v..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.712" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.711" endtime="20210207 23:11:15.712"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.712" endtime="20210207 23:11:15.712"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.711" endtime="20210207 23:11:15.712"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 72, 'title': 'sint hic doloribus consequatur eos non id', 'body': 'quam occaecati qui deleniti consectetur\nconsequatur aut facere quas exercitationem aliquam hic voluptas\nneque i..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.712" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.712" endtime="20210207 23:11:15.712"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.712" endtime="20210207 23:11:15.713"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.712" endtime="20210207 23:11:15.713"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 73, 'title': 'consequuntur deleniti eos quia temporibus ab aliquid at', 'body': 'voluptatem cumque tenetur consequatur expedita ipsum nemo quia explicabo\naut eum minima consequatu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.713" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.713" endtime="20210207 23:11:15.713"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.713" endtime="20210207 23:11:15.713"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.713" endtime="20210207 23:11:15.713"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 74, 'title': 'enim unde ratione doloribus quas enim ut sit sapiente', 'body': 'odit qui et et necessitatibus sint veniam\nmollitia amet doloremque molestiae commodi similique magna..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.714" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.714" endtime="20210207 23:11:15.714"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.714" endtime="20210207 23:11:15.714"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.713" endtime="20210207 23:11:15.714"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 75, 'title': 'dignissimos eum dolor ut enim et delectus in', 'body': 'commodi non non omnis et voluptas sit\nautem aut nobis magnam et sapiente voluptatem\net laborum repellat qui ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.714" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.714" endtime="20210207 23:11:15.715"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.715" endtime="20210207 23:11:15.715"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.714" endtime="20210207 23:11:15.715"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 76, 'title': 'doloremque officiis ad et non perferendis', 'body': 'ut animi facere\ntotam iusto tempore\nmolestiae eum aut et dolorem aperiam\nquaerat recusandae totam odio'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.715" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.715" endtime="20210207 23:11:15.715"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.715" endtime="20210207 23:11:15.716"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.715" endtime="20210207 23:11:15.716"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 77, 'title': 'necessitatibus quasi exercitationem odio', 'body': 'modi ut in nulla repudiandae dolorum nostrum eos\naut consequatur omnis\nut incidunt est omnis iste et quam\nvolup..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.716" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.716" endtime="20210207 23:11:15.716"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.716" endtime="20210207 23:11:15.716"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.716" endtime="20210207 23:11:15.717"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 78, 'title': 'quam voluptatibus rerum veritatis', 'body': 'nobis facilis odit tempore cupiditate quia\nassumenda doloribus rerum qui ea\nillum et qui totam\naut veniam repellendus'..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.717" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.717" endtime="20210207 23:11:15.717"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.717" endtime="20210207 23:11:15.717"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.717" endtime="20210207 23:11:15.717"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 79, 'title': 'pariatur consequatur quia magnam autem omnis non amet', 'body': 'libero accusantium et et facere incidunt sit dolorem\nnon excepturi qui quia sed laudantium\nquisquam..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.718" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.717" endtime="20210207 23:11:15.718"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.718" endtime="20210207 23:11:15.718"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.717" endtime="20210207 23:11:15.718"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 80, 'title': 'labore in ex et explicabo corporis aut quas', 'body': 'ex quod dolorem ea eum iure qui provident amet\nquia qui facere excepturi et repudiandae\nasperiores molestias ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.718" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.718" endtime="20210207 23:11:15.718"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.718" endtime="20210207 23:11:15.719"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.718" endtime="20210207 23:11:15.719"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 81, 'title': 'tempora rem veritatis voluptas quo dolores vero', 'body': 'facere qui nesciunt est voluptatum voluptatem nisi\nsequi eligendi necessitatibus ea at rerum itaque\nharum..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.719" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.719" endtime="20210207 23:11:15.719"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.719" endtime="20210207 23:11:15.720"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.719" endtime="20210207 23:11:15.720"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 82, 'title': 'laudantium voluptate suscipit sunt enim enim', 'body': 'ut libero sit aut totam inventore sunt\nporro sint qui sunt molestiae\nconsequatur cupiditate qui iste ducimus..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.720" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.720" endtime="20210207 23:11:15.720"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.720" endtime="20210207 23:11:15.720"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.720" endtime="20210207 23:11:15.720"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 83, 'title': 'odit et voluptates doloribus alias odio et', 'body': 'est molestiae facilis quis tempora numquam nihil qui\nvoluptate sapiente consequatur est qui\nnecessitatibus aut..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.721" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.720" endtime="20210207 23:11:15.721"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.721" endtime="20210207 23:11:15.721"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.720" endtime="20210207 23:11:15.721"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 84, 'title': 'optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut', 'body': 'sint molestiae magni a et quos\neaque et quasi\nut rerum debitis similique ven..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.721" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.721" endtime="20210207 23:11:15.721"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.722" endtime="20210207 23:11:15.722"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.721" endtime="20210207 23:11:15.722"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 85, 'title': 'dolore veritatis porro provident adipisci blanditiis et sunt', 'body': 'similique sed nisi voluptas iusto omnis\nmollitia et quo\nassumenda suscipit officia magnam si..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.722" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.722" endtime="20210207 23:11:15.722"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.722" endtime="20210207 23:11:15.722"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.722" endtime="20210207 23:11:15.722"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 86, 'title': 'placeat quia et porro iste', 'body': 'quasi excepturi consequatur iste autem temporibus sed molestiae beatae\net quaerat et esse ut\nvoluptatem occaecati et vel expli..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.723" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.723" endtime="20210207 23:11:15.723"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.723" endtime="20210207 23:11:15.723"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.723" endtime="20210207 23:11:15.723"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 87, 'title': 'nostrum quis quasi placeat', 'body': 'eos et molestiae\nnesciunt ut a\ndolores perspiciatis repellendus repellat aliquid\nmagnam sint rem ipsum est'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.724" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.723" endtime="20210207 23:11:15.724"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.724" endtime="20210207 23:11:15.724"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.723" endtime="20210207 23:11:15.724"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 88, 'title': 'sapiente omnis fugit eos', 'body': 'consequatur omnis est praesentium\nducimus non iste\nneque hic deserunt\nvoluptatibus veniam cum et rerum sed'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.724" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.724" endtime="20210207 23:11:15.724"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.724" endtime="20210207 23:11:15.725"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.724" endtime="20210207 23:11:15.725"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 89, 'title': 'sint soluta et vel magnam aut ut sed qui', 'body': 'repellat aut aperiam totam temporibus autem et\narchitecto magnam ut\nconsequatur qui cupiditate rerum quia soluta..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.725" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.725" endtime="20210207 23:11:15.725"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.725" endtime="20210207 23:11:15.726"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.725" endtime="20210207 23:11:15.726"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 90, 'title': 'ad iusto omnis odit dolor voluptatibus', 'body': 'minus omnis soluta quia\nqui sed adipisci voluptates illum ipsam voluptatem\neligendi officia ut in\neos soluta simi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.726" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.726" endtime="20210207 23:11:15.726"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.726" endtime="20210207 23:11:15.726"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.726" endtime="20210207 23:11:15.726"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 91, 'title': 'aut amet sed', 'body': 'libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores qu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.727" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.726" endtime="20210207 23:11:15.727"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.727" endtime="20210207 23:11:15.727"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.726" endtime="20210207 23:11:15.727"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 92, 'title': 'ratione ex tenetur perferendis', 'body': 'aut et excepturi dicta laudantium sint rerum nihil\nlaudantium et at\na neque minima officia et similique libero et\ncommod..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.727" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.727" endtime="20210207 23:11:15.727"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.728" endtime="20210207 23:11:15.728"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.727" endtime="20210207 23:11:15.728"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 93, 'title': 'beatae soluta recusandae', 'body': 'dolorem quibusdam ducimus consequuntur dicta aut quo laboriosam\nvoluptatem quis enim recusandae ut sed sunt\nnostrum est odit to..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.728" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.728" endtime="20210207 23:11:15.728"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.728" endtime="20210207 23:11:15.728"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.728" endtime="20210207 23:11:15.729"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 94, 'title': 'qui qui voluptates illo iste minima', 'body': 'aspernatur expedita soluta quo ab ut similique\nexpedita dolores amet\nsed temporibus distinctio magnam saepe deleniti..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.729" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.729" endtime="20210207 23:11:15.729"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.729" endtime="20210207 23:11:15.729"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.729" endtime="20210207 23:11:15.729"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 95, 'title': 'id minus libero illum nam ad officiis', 'body': 'earum voluptatem facere provident blanditiis velit laboriosam\npariatur accusamus odio saepe\ncumque dolor qui a dic..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.730" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.729" endtime="20210207 23:11:15.730"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.730" endtime="20210207 23:11:15.730"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.729" endtime="20210207 23:11:15.730"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 96, 'title': 'quaerat velit veniam amet cupiditate aut numquam ut sequi', 'body': 'in non odio excepturi sint eum\nlabore voluptates vitae quia qui et\ninventore itaque rerum\nven..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.730" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.730" endtime="20210207 23:11:15.730"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.730" endtime="20210207 23:11:15.731"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.730" endtime="20210207 23:11:15.731"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 97, 'title': 'quas fugiat ut perspiciatis vero provident', 'body': 'eum non blanditiis soluta porro quibusdam voluptas\nvel voluptatem qui placeat dolores qui velit aut\nvel inven..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.731" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.731" endtime="20210207 23:11:15.731"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.731" endtime="20210207 23:11:15.731"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.731" endtime="20210207 23:11:15.731"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 98, 'title': 'laboriosam dolor voluptates', 'body': 'doloremque ex facilis sit sint culpa\nsoluta assumenda eligendi non ut eius\nsequi ducimus vel quasi\nveritatis est dolores'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.732" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.732" endtime="20210207 23:11:15.732"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.732" endtime="20210207 23:11:15.732"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.731" endtime="20210207 23:11:15.732"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 99, 'title': 'temporibus sit alias delectus eligendi possimus magni', 'body': 'quo deleniti praesentium dicta non quod\naut est molestias\nmolestias et officia quis nihil\nitaque ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.732" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.732" endtime="20210207 23:11:15.732"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.733" endtime="20210207 23:11:15.733"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.732" endtime="20210207 23:11:15.733"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 100, 'title': 'at nam consequatur ea labore ea harum', 'body': 'cupiditate quo est a modi nesciunt soluta\nipsa voluptas error itaque dicta in\nautem qui minus magnam et distincti..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210207 23:11:15.733" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:15.733" endtime="20210207 23:11:15.733"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.733" endtime="20210207 23:11:15.733"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.733" endtime="20210207 23:11:15.733"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.649" endtime="20210207 23:11:15.734"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>100</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210207 23:11:15.734" level="INFO">Length is 100</msg>
<msg timestamp="20210207 23:11:15.734" level="INFO">${jsonLength} = 100</msg>
<status status="PASS" starttime="20210207 23:11:15.734" endtime="20210207 23:11:15.734"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.734" endtime="20210207 23:11:15.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210207 23:11:15.735" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.735" endtime="20210207 23:11:15.735"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.734" endtime="20210207 23:11:15.735"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.560" endtime="20210207 23:11:15.735"></status>
</kw>
<doc>Validates success response along with all fields and record count 100</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:15.559" endtime="20210207 23:11:15.735" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Fetch post details based on post ID and validate ID in response">
<kw name="Get API response for post with different post ID" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{validPostId} ]" type="for">
<kw name="${postId} = 1" type="foritem">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:15.759" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1 
 path_url=/posts/1 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:15.759" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612662771', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"124-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '8309', 'cf-request-id': '08216f39ad0000ea0819245000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=rNjTAzPKmUKjTcw5c9GMBbJDyvBA8ZpPkdAUzrp9Fbm2HM9Str2mS%2F9GSdXtuJ%2Fq5fRE%2FGCKrR91tZcGXsBF%2BIZDPZpldlBkEWc7RRRMbOsVHCk5qubfcAPQTA1u"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e2816f7d37ea08-IAD', 'Content-Encoding': 'gzip'} 
 body={
  "userId": 1,
  "id": 1,
  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
} 
 </msg>
<msg timestamp="20210207 23:11:15.760" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.737" endtime="20210207 23:11:15.760"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:15.737" endtime="20210207 23:11:15.761"></status>
</kw>
<msg timestamp="20210207 23:11:15.762" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.737" endtime="20210207 23:11:15.762"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.764" endtime="20210207 23:11:15.765"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:15.765" level="INFO">${jsonObject} = {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit...</msg>
<status status="PASS" starttime="20210207 23:11:15.765" endtime="20210207 23:11:15.765"></status>
</kw>
<msg timestamp="20210207 23:11:15.766" level="INFO">${jsonResponse} = {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit...</msg>
<status status="PASS" starttime="20210207 23:11:15.762" endtime="20210207 23:11:15.766"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..id</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210207 23:11:15.802" level="INFO">${post_id} = [1]</msg>
<status status="PASS" starttime="20210207 23:11:15.766" endtime="20210207 23:11:15.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.802" endtime="20210207 23:11:15.803"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.737" endtime="20210207 23:11:15.803"></status>
</kw>
<kw name="${postId} = 4" type="foritem">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:15.826" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/4 
 path_url=/posts/4 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:15.826" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/4 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '996', 'X-Ratelimit-Reset': '1610211040', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"10e-HqG77o1RAmatkSwR36f4+Io6g1E"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '12449', 'cf-request-id': '08216f39f10000ea08342e7000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=rFvR7iNC9WmmY6RbCTnkpbGabJllczMZDIxwxjI9ZQr24EOImDrJA2OTJyzugCX5ZAoCJPg6Whad65WATPAwBI7yWYBraQ349rM%2FnrDcF31jcdq5T3lLl9IbE2Kn"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e2816fedd4ea08-IAD', 'Content-Encoding': 'gzip'} 
 body={
  "userId": 1,
  "id": 4,
  "title": "eum et est occaecati",
  "body": "ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\nquis sunt voluptatem rerum illo velit"
} 
 </msg>
<msg timestamp="20210207 23:11:15.827" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.805" endtime="20210207 23:11:15.827"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:15.804" endtime="20210207 23:11:15.827"></status>
</kw>
<msg timestamp="20210207 23:11:15.828" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.803" endtime="20210207 23:11:15.828"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.829" endtime="20210207 23:11:15.830"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:15.831" level="INFO">${jsonObject} = {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur do...</msg>
<status status="PASS" starttime="20210207 23:11:15.830" endtime="20210207 23:11:15.831"></status>
</kw>
<msg timestamp="20210207 23:11:15.831" level="INFO">${jsonResponse} = {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur do...</msg>
<status status="PASS" starttime="20210207 23:11:15.828" endtime="20210207 23:11:15.831"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..id</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210207 23:11:15.861" level="INFO">${post_id} = [4]</msg>
<status status="PASS" starttime="20210207 23:11:15.831" endtime="20210207 23:11:15.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.861" endtime="20210207 23:11:15.862"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.803" endtime="20210207 23:11:15.862"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.736" endtime="20210207 23:11:15.862"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.736" endtime="20210207 23:11:15.862"></status>
</kw>
<doc>Validates success retuned along with postid in response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:15.736" endtime="20210207 23:11:15.862" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="To verify posts response in case of invalid post ID">
<kw name="Get API response for post with invalid post ID" library="GetPostApi">
<arguments>
<arg>${INVALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{invalidPostId} ]" type="for">
<kw name="${postId} = 101" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:15.883" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/101 
 path_url=/posts/101 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:15.883" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/101 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612748170', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '9335', 'cf-request-id': '08216f3a2b0000ea0845b4a000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=MCg6%2BNoh5CsxSzJWvCCBCqqiP6cMZIhbWLRiT9%2FfGG%2BVMnbTgUzGrXS8hmDebqIE7QW1rjcfUuVr9z5IRoG%2BXz5SHo1incpSWzfT5lqP%2B4lM%2FxY2mIzWACwhxcfj"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281704e6cea08-IAD'} 
 body={} 
 </msg>
<msg timestamp="20210207 23:11:15.891" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="FAIL" starttime="20210207 23:11:15.864" endtime="20210207 23:11:15.891"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210207 23:11:15.864" endtime="20210207 23:11:15.891"></status>
</kw>
<msg timestamp="20210207 23:11:15.892" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="PASS" starttime="20210207 23:11:15.863" endtime="20210207 23:11:15.892"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.892" endtime="20210207 23:11:15.893"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.863" endtime="20210207 23:11:15.893"></status>
</kw>
<kw name="${postId} = -102" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:15.914" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/-102 
 path_url=/posts/-102 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:15.914" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/-102 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1612748170', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '9335', 'cf-request-id': '08216f3a4a0000ea08078ad000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=kkJXteBprECDe8yr%2BBaQZgdTTGWbLOhm01njbFsgY4Aam7CVtv5JmkXti4kTH7LVtQtdbsBITqnvvzHEKIuxDbztiWOYXvGAXk5%2BQimvGZ%2FEPf%2B9StAdw9%2BNUpMP"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281707ebeea08-IAD'} 
 body={} 
 </msg>
<msg timestamp="20210207 23:11:15.915" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="FAIL" starttime="20210207 23:11:15.894" endtime="20210207 23:11:15.915"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210207 23:11:15.893" endtime="20210207 23:11:15.915"></status>
</kw>
<msg timestamp="20210207 23:11:15.916" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="PASS" starttime="20210207 23:11:15.893" endtime="20210207 23:11:15.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.916" endtime="20210207 23:11:15.918"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.893" endtime="20210207 23:11:15.918"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.863" endtime="20210207 23:11:15.918"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.863" endtime="20210207 23:11:15.918"></status>
</kw>
<doc>Validates 404 Not Found Response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:15.862" endtime="20210207 23:11:15.918" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Verify posts for specific user and validate number of records">
<kw name="GET API response for post to check all posts of specific user" library="GetPostApi">
<arguments>
<arg>${VALID_USERID}</arg>
</arguments>
<kw name="${userId} IN [ @{validUserId} ]" type="for">
<kw name="${userId} = 1" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:15.922" level="INFO">${param} = {'userId': '1'}</msg>
<status status="PASS" starttime="20210207 23:11:15.921" endtime="20210207 23:11:15.922"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:15.945" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId=1 
 path_url=/posts/?userId=1 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:15.945" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId=1 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612742289', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"aa6-j2NSH739l9uq40OywFMn7Y0C/iY"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '15192', 'cf-request-id': '08216f3a650000ea0803393000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=YIU%2Fo1LTD5hxIBtLeeyVEPl2KDH2q%2BbVM9t%2Fd%2FYdLtewRdjdeHouaRozYG7zSmVuqm6Eeha7rMwugnTB3LGK571RPmXYxIc%2BoSUnjcGGXe%2BxG2115rYK%2BY22J9DU"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e28170af0cea08-IAD'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  },
  {
    "userId": 1,
    "id": 2,
    "title": "qui est esse",
    "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
  },
  {
    "userId": 1,
    "id": 3,
    "title": "ea molestias quasi exercitationem repellat qui ipsa sit aut",
    "body": "et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accusantium quis pariatur\nmolestiae porro eius odio et labore et velit aut"
  },
  {
    "userId": 1,
    "id": 4,
    "title": "eum et est occaecati",
    "body": "ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\nquis sunt voluptatem rerum illo velit"
  },
  {
    "userId": 1,
    "id": 5,
    "title": "nesciunt quas odio",
    "body": "repudiandae veniam quaerat sunt sed\nalias aut fugiat sit autem sed est\nvoluptatem omnis possimus esse voluptatibus quis\nest aut tenetur dolor neque"
  },
  {
    "userId": 1,
    "id": 6,
    "title": "dolorem eum magni eos aperiam quia",
    "body": "ut aspernatur corporis harum nihil quis provident sequi\nmollitia nobis aliquid molestiae\nperspiciatis et ea nemo ab reprehenderit accusantium quas\nvoluptate dolores velit et doloremque molestiae"
  },
  {
    "userId": 1,
    "id": 7,
    "title": "magnam facilis autem",
    "body": "dolore placeat quibusdam ea quo vitae\nmagni quis enim qui quis quo nemo aut saepe\nquidem repellat excepturi ut quia\nsunt ut sequi eos ea sed quas"
  },
  {
    "userId": 1,
    "id": 8,
    "title": "dolorem dolore est ipsam",
    "body": "dignissimos aperiam dolorem qui eum\nfacilis quibusdam animi sint suscipit qui sint possimus cum\nquaerat magni maiores excepturi\nipsam ut commodi dolor voluptatum modi aut vitae"
  },
  {
    "userId": 1,
    "id": 9,
    "title": "nesciunt iure omnis dolorem tempora et accusantium",
    "body": "consectetur animi nesciunt iure dolore\nenim quia ad\nveniam autem ut quam aut nobis\net est aut quod aut provident voluptas autem voluptas"
  },
  {
    "userId": 1,
    "id": 10,
    "title": "optio molestias id quia eum",
    "body": "quo et expedita modi cum officia vel magni\ndoloribus qui repudiandae\nvero nisi sit\nquos veniam quod sed accusamus veritatis error"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:15.946" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.923" endtime="20210207 23:11:15.946"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:15.922" endtime="20210207 23:11:15.946"></status>
</kw>
<msg timestamp="20210207 23:11:15.946" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.922" endtime="20210207 23:11:15.946"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.947" endtime="20210207 23:11:15.948"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:15.949" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:15.948" endtime="20210207 23:11:15.949"></status>
</kw>
<msg timestamp="20210207 23:11:15.949" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:15.947" endtime="20210207 23:11:15.950"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..userId</arg>
</arguments>
<assign>
<var>${user_Id}</var>
</assign>
<msg timestamp="20210207 23:11:15.994" level="INFO">${user_Id} = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</msg>
<status status="PASS" starttime="20210207 23:11:15.950" endtime="20210207 23:11:15.994"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>10</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210207 23:11:15.995" level="INFO">Length is 10</msg>
<msg timestamp="20210207 23:11:15.995" level="INFO">${jsonLength} = 10</msg>
<status status="PASS" starttime="20210207 23:11:15.994" endtime="20210207 23:11:15.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.995" endtime="20210207 23:11:15.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210207 23:11:15.996" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.995" endtime="20210207 23:11:15.996"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.994" endtime="20210207 23:11:15.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${user_Id}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:15.996" endtime="20210207 23:11:15.996"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.921" endtime="20210207 23:11:15.996"></status>
</kw>
<kw name="${userId} = 10" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:15.997" level="INFO">${param} = {'userId': '10'}</msg>
<status status="PASS" starttime="20210207 23:11:15.996" endtime="20210207 23:11:15.997"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.018" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId=10 
 path_url=/posts/?userId=10 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.018" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId=10 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1612742289', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"a68-bp+xhXz2hSYZZUvrpfEFLIhQbe4"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '15193', 'cf-request-id': '08216f3ab20000ea080d1fd000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=eKwRxpM%2BGRSAYCjsJ8QFhGjp6EJKDN1g20MbI0CdfQJtgYJ6kV4XuIAuvcCnlXGva1pUSfI3mIyZpKnuUyvJJaS8vcH29k15BxFOL%2BtrWtPlMRTOeW5XFc9mF8o0"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281711ffdea08-IAD'} 
 body=[
  {
    "userId": 10,
    "id": 91,
    "title": "aut amet sed",
    "body": "libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores quia eos et placeat"
  },
  {
    "userId": 10,
    "id": 92,
    "title": "ratione ex tenetur perferendis",
    "body": "aut et excepturi dicta laudantium sint rerum nihil\nlaudantium et at\na neque minima officia et similique libero et\ncommodi voluptate qui"
  },
  {
    "userId": 10,
    "id": 93,
    "title": "beatae soluta recusandae",
    "body": "dolorem quibusdam ducimus consequuntur dicta aut quo laboriosam\nvoluptatem quis enim recusandae ut sed sunt\nnostrum est odit totam\nsit error sed sunt eveniet provident qui nulla"
  },
  {
    "userId": 10,
    "id": 94,
    "title": "qui qui voluptates illo iste minima",
    "body": "aspernatur expedita soluta quo ab ut similique\nexpedita dolores amet\nsed temporibus distinctio magnam saepe deleniti\nomnis facilis nam ipsum natus sint similique omnis"
  },
  {
    "userId": 10,
    "id": 95,
    "title": "id minus libero illum nam ad officiis",
    "body": "earum voluptatem facere provident blanditiis velit laboriosam\npariatur accusamus odio saepe\ncumque dolor qui a dicta ab doloribus consequatur omnis\ncorporis cupiditate eaque assumenda ad nesciunt"
  },
  {
    "userId": 10,
    "id": 96,
    "title": "quaerat velit veniam amet cupiditate aut numquam ut sequi",
    "body": "in non odio excepturi sint eum\nlabore voluptates vitae quia qui et\ninventore itaque rerum\nveniam non exercitationem delectus aut"
  },
  {
    "userId": 10,
    "id": 97,
    "title": "quas fugiat ut perspiciatis vero provident",
    "body": "eum non blanditiis soluta porro quibusdam voluptas\nvel voluptatem qui placeat dolores qui velit aut\nvel inventore aut cumque culpa explicabo aliquid at\nperspiciatis est et voluptatem dignissimos dolor itaque sit nam"
  },
  {
    "userId": 10,
    "id": 98,
    "title": "laboriosam dolor voluptates",
    "body": "doloremque ex facilis sit sint culpa\nsoluta assumenda eligendi non ut eius\nsequi ducimus vel quasi\nveritatis est dolores"
  },
  {
    "userId": 10,
    "id": 99,
    "title": "temporibus sit alias delectus eligendi possimus magni",
    "body": "quo deleniti praesentium dicta non quod\naut est molestias\nmolestias et officia quis nihil\nitaque dolorem quia"
  },
  {
    "userId": 10,
    "id": 100,
    "title": "at nam consequatur ea labore ea harum",
    "body": "cupiditate quo est a modi nesciunt soluta\nipsa voluptas error itaque dicta in\nautem qui minus magnam et distinctio eum\naccusamus ratione error aut"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:16.019" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.998" endtime="20210207 23:11:16.019"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:15.997" endtime="20210207 23:11:16.019"></status>
</kw>
<msg timestamp="20210207 23:11:16.019" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:15.997" endtime="20210207 23:11:16.019"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.020" endtime="20210207 23:11:16.021"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.022" level="INFO">${jsonObject} = [{'userId': 10, 'id': 91, 'title': 'aut amet sed', 'body': 'libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores q...</msg>
<status status="PASS" starttime="20210207 23:11:16.021" endtime="20210207 23:11:16.022"></status>
</kw>
<msg timestamp="20210207 23:11:16.022" level="INFO">${jsonResponse} = [{'userId': 10, 'id': 91, 'title': 'aut amet sed', 'body': 'libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores q...</msg>
<status status="PASS" starttime="20210207 23:11:16.020" endtime="20210207 23:11:16.022"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..userId</arg>
</arguments>
<assign>
<var>${user_Id}</var>
</assign>
<msg timestamp="20210207 23:11:16.050" level="INFO">${user_Id} = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]</msg>
<status status="PASS" starttime="20210207 23:11:16.023" endtime="20210207 23:11:16.050"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>10</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210207 23:11:16.051" level="INFO">Length is 10</msg>
<msg timestamp="20210207 23:11:16.051" level="INFO">${jsonLength} = 10</msg>
<status status="PASS" starttime="20210207 23:11:16.050" endtime="20210207 23:11:16.051"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.051" endtime="20210207 23:11:16.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.051" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.051" endtime="20210207 23:11:16.051"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.050" endtime="20210207 23:11:16.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${user_Id}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.052" endtime="20210207 23:11:16.052"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.996" endtime="20210207 23:11:16.052"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.920" endtime="20210207 23:11:16.052"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:15.920" endtime="20210207 23:11:16.052"></status>
</kw>
<doc>Validates success response along with userid and number of records as 10</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:15.919" endtime="20210207 23:11:16.052" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Verify posts response for incorrect user">
<kw name="GET API response for post of incorrect user" library="GetPostApi">
<arguments>
<arg>${INCORRECT_USERID}</arg>
</arguments>
<kw name="${userId} IN [ @{incorrectUserId} ]" type="for">
<kw name="${userId} = 11" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.054" level="INFO">${param} = {'userId': '11'}</msg>
<status status="PASS" starttime="20210207 23:11:16.054" endtime="20210207 23:11:16.054"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>@{param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.131" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId 
 path_url=/posts/?userId 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.132" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612749430', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '8052', 'Accept-Ranges': 'bytes', 'cf-request-id': '08216f3aef0000ea082586c000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=9CC5VxokNYDw2CYroZUS656Izah2%2FVfSSMTzvB7mvQRGBjGnsF3EqioetSF4%2FE1qnq27yqD2QhjULvCDXe3Ruxer%2ByC0Sf1gRPq8I%2FBi25FZWSFRwEib9tAtz3kX"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e2817178a1ea08-IAD'} 
 body=[] 
 </msg>
<msg timestamp="20210207 23:11:16.132" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.055" endtime="20210207 23:11:16.132"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.055" endtime="20210207 23:11:16.133"></status>
</kw>
<msg timestamp="20210207 23:11:16.133" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.054" endtime="20210207 23:11:16.133"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.134" endtime="20210207 23:11:16.135"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.136" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.136" endtime="20210207 23:11:16.136"></status>
</kw>
<msg timestamp="20210207 23:11:16.137" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.133" endtime="20210207 23:11:16.137"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.137" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210207 23:11:16.137" endtime="20210207 23:11:16.137"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.054" endtime="20210207 23:11:16.137"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.053" endtime="20210207 23:11:16.138"></status>
</kw>
<kw name="${userId} = 12" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.139" level="INFO">${param} = {'userId': '12'}</msg>
<status status="PASS" starttime="20210207 23:11:16.138" endtime="20210207 23:11:16.139"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>@{param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.167" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId 
 path_url=/posts/?userId 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.168" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612749430', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '8052', 'Accept-Ranges': 'bytes', 'cf-request-id': '08216f3b440000ea08518d3000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=WE%2FJ5EHk2R4AxZ6F1VjrIMKycVq1aTUFiUzRXEMBT5zNfTnFFId8ymWfsD%2FoFukbBwgGzlDt1tvv%2BgipVm2XZhaJLa8icVGBex7JQI2%2Fx%2F%2BYsYt9E3T%2FCnbOeajx"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e28172098cea08-IAD'} 
 body=[] 
 </msg>
<msg timestamp="20210207 23:11:16.168" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.141" endtime="20210207 23:11:16.168"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.140" endtime="20210207 23:11:16.169"></status>
</kw>
<msg timestamp="20210207 23:11:16.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.140" endtime="20210207 23:11:16.169"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.171" endtime="20210207 23:11:16.171"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.172" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.172" endtime="20210207 23:11:16.172"></status>
</kw>
<msg timestamp="20210207 23:11:16.173" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.170" endtime="20210207 23:11:16.173"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.173" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210207 23:11:16.173" endtime="20210207 23:11:16.173"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.139" endtime="20210207 23:11:16.174"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.138" endtime="20210207 23:11:16.174"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.053" endtime="20210207 23:11:16.174"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.053" endtime="20210207 23:11:16.174"></status>
</kw>
<doc>Validates success response with empty response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.053" endtime="20210207 23:11:16.174" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Verify all post comments are getting displayed for provided post ID">
<kw name="Get API response for post to check all comments" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{validPostId} ]" type="for">
<kw name="${postId} = 1" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.177" endtime="20210207 23:11:16.177"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.213" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1/comments 
 path_url=/posts/1/comments 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.214" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1/comments 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '997', 'X-Ratelimit-Reset': '1612647110', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"5e6-4bSPS5tq8F8ZDeFJULWh6upjp7U"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '23301', 'cf-request-id': '08216f3b6d0000ea0826be1000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=uwSRbemSx7TE9%2BIf1nhOIdXzyP1h399%2BXqnaECFy5HRKxnaZy1KcixRwi%2BCQvjnPHJUh4gCRDedogUwz8HJ9%2FL7XeuUYZc3f%2BtcZ4ndK7rnfIG5Ii8lXxkD4z5mW"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e2817249e2ea08-IAD'} 
 body=[
  {
    "postId": 1,
    "id": 1,
    "name": "id labore ex et quam laborum",
    "email": "Eliseo@gardner.biz",
    "body": "laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"
  },
  {
    "postId": 1,
    "id": 2,
    "name": "quo vero reiciendis velit similique earum",
    "email": "Jayne_Kuhic@sydney.com",
    "body": "est natus enim nihil est dolore omnis voluptatem numquam\net omnis occaecati quod ullam at\nvoluptatem error expedita pariatur\nnihil sint nostrum voluptatem reiciendis et"
  },
  {
    "postId": 1,
    "id": 3,
    "name": "odio adipisci rerum aut animi",
    "email": "Nikita@garfield.biz",
    "body": "quia molestiae reprehenderit quasi aspernatur\naut expedita occaecati aliquam eveniet laudantium\nomnis quibusdam delectus saepe quia accusamus maiores nam est\ncum et ducimus et vero voluptates excepturi deleniti ratione"
  },
  {
    "postId": 1,
    "id": 4,
    "name": "alias odio sit",
    "email": "Lew@alysha.tv",
    "body": "non et atque\noccaecati deserunt quas accusantium unde odit nobis qui voluptatem\nquia voluptas consequuntur itaque dolor\net qui rerum deleniti ut occaecati"
  },
  {
    "postId": 1,
    "id": 5,
    "name": "vero eaque aliquid doloribus et culpa",
    "email": "Hayden@althea.biz",
    "body": "harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugit inventore cupiditate\nvoluptates magni quo et"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:16.214" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.179" endtime="20210207 23:11:16.215"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.178" endtime="20210207 23:11:16.215"></status>
</kw>
<msg timestamp="20210207 23:11:16.215" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.177" endtime="20210207 23:11:16.215"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.217" endtime="20210207 23:11:16.217"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.218" level="INFO">${jsonObject} = [{'postId': 1, 'id': 1, 'name': 'id labore ex et quam laborum', 'email': 'Eliseo@gardner.biz', 'body': 'laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor q...</msg>
<status status="PASS" starttime="20210207 23:11:16.218" endtime="20210207 23:11:16.218"></status>
</kw>
<msg timestamp="20210207 23:11:16.219" level="INFO">${jsonResponse} = [{'postId': 1, 'id': 1, 'name': 'id labore ex et quam laborum', 'email': 'Eliseo@gardner.biz', 'body': 'laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor q...</msg>
<status status="PASS" starttime="20210207 23:11:16.216" endtime="20210207 23:11:16.219"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>5</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210207 23:11:16.220" level="INFO">Length is 5</msg>
<msg timestamp="20210207 23:11:16.220" level="INFO">${jsonLength} = 5</msg>
<status status="PASS" starttime="20210207 23:11:16.220" endtime="20210207 23:11:16.220"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.220" endtime="20210207 23:11:16.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.221" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.221" endtime="20210207 23:11:16.221"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.219" endtime="20210207 23:11:16.222"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedCommentKey}</var>
</assign>
<msg timestamp="20210207 23:11:16.222" level="INFO">${unsortedCommentKey} = ['postId', 'id', 'name', 'email', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:16.222" endtime="20210207 23:11:16.222"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedCommentKey}</arg>
<arg>${commentsKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.223" endtime="20210207 23:11:16.223"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>$..postId</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210207 23:11:16.251" level="INFO">${post_id} = [1]</msg>
<status status="PASS" starttime="20210207 23:11:16.224" endtime="20210207 23:11:16.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.252" endtime="20210207 23:11:16.252"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.177" endtime="20210207 23:11:16.252"></status>
</kw>
<kw name="${postId} = 4" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.253" endtime="20210207 23:11:16.255"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.298" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/4/comments 
 path_url=/posts/4/comments 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.298" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/4/comments 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '980', 'X-Ratelimit-Reset': '1612532991', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"644-PjWFVfLL86ukVeckYRQFyH3L7DU"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '6589', 'cf-request-id': '08216f3bb30000ea0823241000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=ZxWQQJvl28CUXKcI4bgBKaLd%2BTus82zj08%2BOn83RhCQdq5a%2BZcO2YItOL0d2MNhuAqSYadYCAJu6Tro5IsTMN13lR8wkR861pkw0x9%2FKKL%2FhMq4Ic%2Bn%2Bp4102VY%2B"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e28172ba9eea08-IAD'} 
 body=[
  {
    "postId": 4,
    "id": 16,
    "name": "perferendis temporibus delectus optio ea eum ratione dolorum",
    "email": "Christine@ayana.info",
    "body": "iste ut laborum aliquid velit facere itaque\nquo ut soluta dicta voluptate\nerror tempore aut et\nsequi reiciendis dignissimos expedita consequuntur libero sed fugiat facilis"
  },
  {
    "postId": 4,
    "id": 17,
    "name": "eos est animi quis",
    "email": "Preston_Hudson@blaise.tv",
    "body": "consequatur necessitatibus totam sed sit dolorum\nrecusandae quae odio excepturi voluptatum harum voluptas\nquisquam sit ad eveniet delectus\ndoloribus odio qui non labore"
  },
  {
    "postId": 4,
    "id": 18,
    "name": "aut et tenetur ducimus illum aut nulla ab",
    "email": "Vincenza_Klocko@albertha.name",
    "body": "veritatis voluptates necessitatibus maiores corrupti\nneque et exercitationem amet sit et\nullam velit sit magnam laborum\nmagni ut molestias"
  },
  {
    "postId": 4,
    "id": 19,
    "name": "sed impedit rerum quia et et inventore unde officiis",
    "email": "Madelynn.Gorczany@darion.biz",
    "body": "doloribus est illo sed minima aperiam\nut dignissimos accusantium tempore atque et aut molestiae\nmagni ut accusamus voluptatem quos ut voluptates\nquisquam porro sed architecto ut"
  },
  {
    "postId": 4,
    "id": 20,
    "name": "molestias expedita iste aliquid voluptates",
    "email": "Mariana_Orn@preston.org",
    "body": "qui harum consequatur fugiat\net eligendi perferendis at molestiae commodi ducimus\ndoloremque asperiores numquam qui\nut sit dignissimos reprehenderit tempore"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:16.298" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.256" endtime="20210207 23:11:16.299"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.255" endtime="20210207 23:11:16.299"></status>
</kw>
<msg timestamp="20210207 23:11:16.299" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.255" endtime="20210207 23:11:16.299"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.301" endtime="20210207 23:11:16.302"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.303" level="INFO">${jsonObject} = [{'postId': 4, 'id': 16, 'name': 'perferendis temporibus delectus optio ea eum ratione dolorum', 'email': 'Christine@ayana.info', 'body': 'iste ut laborum aliquid velit facere itaque\nquo ut soluta di...</msg>
<status status="PASS" starttime="20210207 23:11:16.302" endtime="20210207 23:11:16.303"></status>
</kw>
<msg timestamp="20210207 23:11:16.303" level="INFO">${jsonResponse} = [{'postId': 4, 'id': 16, 'name': 'perferendis temporibus delectus optio ea eum ratione dolorum', 'email': 'Christine@ayana.info', 'body': 'iste ut laborum aliquid velit facere itaque\nquo ut soluta di...</msg>
<status status="PASS" starttime="20210207 23:11:16.300" endtime="20210207 23:11:16.303"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>5</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210207 23:11:16.304" level="INFO">Length is 5</msg>
<msg timestamp="20210207 23:11:16.305" level="INFO">${jsonLength} = 5</msg>
<status status="PASS" starttime="20210207 23:11:16.304" endtime="20210207 23:11:16.305"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.305" endtime="20210207 23:11:16.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.306" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.305" endtime="20210207 23:11:16.306"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.303" endtime="20210207 23:11:16.306"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedCommentKey}</var>
</assign>
<msg timestamp="20210207 23:11:16.307" level="INFO">${unsortedCommentKey} = ['postId', 'id', 'name', 'email', 'body']</msg>
<status status="PASS" starttime="20210207 23:11:16.306" endtime="20210207 23:11:16.307"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedCommentKey}</arg>
<arg>${commentsKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.307" endtime="20210207 23:11:16.308"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>$..postId</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210207 23:11:16.336" level="INFO">${post_id} = [4]</msg>
<status status="PASS" starttime="20210207 23:11:16.308" endtime="20210207 23:11:16.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.336" endtime="20210207 23:11:16.337"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.252" endtime="20210207 23:11:16.337"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.177" endtime="20210207 23:11:16.337"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.176" endtime="20210207 23:11:16.337"></status>
</kw>
<doc>Takes multiple input and checks comments for each post id</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.175" endtime="20210207 23:11:16.337" critical="yes"></status>
</test>
<test id="s1-s1-t7" name="Verify response for post comments with invalid post ID">
<kw name="Get API response for post with invalid post ID" library="GetPostApi">
<arguments>
<arg>${INVALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{invalidPostId} ]" type="for">
<kw name="${postId} = 101" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.362" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/101 
 path_url=/posts/101 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.363" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/101 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612748170', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '9336', 'cf-request-id': '08216f3c0a0000ea084300d000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=nsZyONjYH6wyJVJ6%2B3%2FqYxPLJLeyhRBURdcJ70vCIhuqrhgZprIGmb4WQ8vxqzqWuFlWNWZ1dJhuqde9SBjAZSvv4DPDhm%2FgPXBtuIni60EaZDwu6oKL6OLvXSCd"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281734b83ea08-IAD'} 
 body={} 
 </msg>
<msg timestamp="20210207 23:11:16.363" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="FAIL" starttime="20210207 23:11:16.342" endtime="20210207 23:11:16.363"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210207 23:11:16.342" endtime="20210207 23:11:16.364"></status>
</kw>
<msg timestamp="20210207 23:11:16.364" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="PASS" starttime="20210207 23:11:16.342" endtime="20210207 23:11:16.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.364" endtime="20210207 23:11:16.365"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.341" endtime="20210207 23:11:16.365"></status>
</kw>
<kw name="${postId} = -102" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.388" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/-102 
 path_url=/posts/-102 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.388" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/-102 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1612748170', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '9336', 'cf-request-id': '08216f3c210000ea082db1f000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=KpGvXsjFeAGZo39p5t%2FQUWkCfqkg3AOd4ccGJl7WD0PTJ%2FGglvgr%2BnZAlrtg%2Bynq7qINJgVwymhheig5QL046YMujTXtY4MkKDC31qmDbRiJBeT3d5A%2BwvN1pHuQ"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281736bc9ea08-IAD'} 
 body={} 
 </msg>
<msg timestamp="20210207 23:11:16.389" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="FAIL" starttime="20210207 23:11:16.366" endtime="20210207 23:11:16.389"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210207 23:11:16.365" endtime="20210207 23:11:16.390"></status>
</kw>
<msg timestamp="20210207 23:11:16.390" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="PASS" starttime="20210207 23:11:16.365" endtime="20210207 23:11:16.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.390" endtime="20210207 23:11:16.391"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.365" endtime="20210207 23:11:16.391"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.341" endtime="20210207 23:11:16.391"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.341" endtime="20210207 23:11:16.392"></status>
</kw>
<doc>Takes multiple invalid input and validates empty response</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.339" endtime="20210207 23:11:16.392" critical="yes"></status>
</test>
<test id="s1-s1-t8" name="To check API response for post in case of incorrect post route resource">
<kw name="Check API response in case of incorrect post resource" library="GetPostApi">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${INCORRECTRESOURCE}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${INCORRECTRESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.415" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts//comment 
 path_url=/posts//comment 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.415" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts//comment 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612751230', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '6299', 'cf-request-id': '08216f3c3f0000ea08f51b8000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=eX%2FOE6zs8ifC5q6Muyk%2Bk2BJdzS0gaV8b3hrUaV60CLB3dxb3hQ4aLOx%2BlHwJZY%2Fc0hfnxqc4s2jx46TDUBtmoI0VfMbO2r7PrhISpyL0Q4Pe1o5uzTGOIwNNJYG"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281739c14ea08-IAD'} 
 body={} 
 </msg>
<msg timestamp="20210207 23:11:16.416" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts//comment</msg>
<status status="FAIL" starttime="20210207 23:11:16.397" endtime="20210207 23:11:16.416"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210207 23:11:16.396" endtime="20210207 23:11:16.417"></status>
</kw>
<msg timestamp="20210207 23:11:16.417" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts//comment</msg>
<status status="PASS" starttime="20210207 23:11:16.394" endtime="20210207 23:11:16.417"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.418" endtime="20210207 23:11:16.418"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.393" endtime="20210207 23:11:16.419"></status>
</kw>
<doc>Varifies 404 Not found response for incorrect post resource</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.392" endtime="20210207 23:11:16.419" critical="yes"></status>
</test>
<test id="s1-s1-t9" name="Check post for specific title with query parameter">
<kw name="GET post API response for specific title with query parameter" library="GetPostApi">
<arguments>
<arg>${POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>title=${titleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.422" level="INFO">${param} = {'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit'}</msg>
<status status="PASS" starttime="20210207 23:11:16.421" endtime="20210207 23:11:16.422"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.445" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 path_url=/posts/?title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.446" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612753210', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"134-QtF0EaiifRh1Z3cEspXIXV0RoQY"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '4323', 'cf-request-id': '08216f3c5e0000ea081e936000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=FM64uwmWHjnyTRqu6ow8b%2F10JkdWuy8cgZkTeUC1h9bcEpDGBnkjiaw2G%2Bpd%2FLBt7nhlDBBiKu83llaIf9LDjWJJas1n5ENoViLRe17%2BiUYpfwQPb8JHJKziDD3c"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e28173cc5bea08-IAD', 'Content-Encoding': 'gzip'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:16.447" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.424" endtime="20210207 23:11:16.448"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.423" endtime="20210207 23:11:16.449"></status>
</kw>
<msg timestamp="20210207 23:11:16.449" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.422" endtime="20210207 23:11:16.449"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.450" endtime="20210207 23:11:16.451"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.452" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:16.451" endtime="20210207 23:11:16.452"></status>
</kw>
<msg timestamp="20210207 23:11:16.452" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:16.449" endtime="20210207 23:11:16.452"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..title</arg>
</arguments>
<assign>
<var>${title}</var>
</assign>
<msg timestamp="20210207 23:11:16.478" level="INFO">${title} = ['sunt aut facere repellat provident occaecati excepturi optio reprehenderit']</msg>
<status status="PASS" starttime="20210207 23:11:16.452" endtime="20210207 23:11:16.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${title[0]}</arg>
<arg>${titleValue}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.478" endtime="20210207 23:11:16.479"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.421" endtime="20210207 23:11:16.479"></status>
</kw>
<doc>verifies success response along with title verification</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.419" endtime="20210207 23:11:16.479" critical="yes"></status>
</test>
<test id="s1-s1-t10" name="Check post for incorrect title with query parameter">
<kw name="GET post API response for incorrect title with query parameter" library="GetPostApi">
<arguments>
<arg>${INCORRECT_POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>title=${incorrectTitleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.481" level="INFO">${param} = {'title': '@abcd'}</msg>
<status status="PASS" starttime="20210207 23:11:16.481" endtime="20210207 23:11:16.481"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.499" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?title=%40abcd 
 path_url=/posts/?title=%40abcd 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.499" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?title=%40abcd 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612751530', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '5975', 'Accept-Ranges': 'bytes', 'cf-request-id': '08216f3c960000ea080d22c000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=5H63u41VpM58%2BXK4%2BhuCgdVXWrfGHieUSvEsjf9cYqG5gk04xtRvAlNiTNilT0cPlp7QXZK8S53YERwyzPhuXam7gNuW3gukI3LamIPO4%2FEpdmd6jgBYp1y3qxLO"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281742cefea08-IAD'} 
 body=[] 
 </msg>
<msg timestamp="20210207 23:11:16.500" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.483" endtime="20210207 23:11:16.500"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.482" endtime="20210207 23:11:16.500"></status>
</kw>
<msg timestamp="20210207 23:11:16.501" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.482" endtime="20210207 23:11:16.501"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.501" endtime="20210207 23:11:16.502"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.503" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.502" endtime="20210207 23:11:16.503"></status>
</kw>
<msg timestamp="20210207 23:11:16.503" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.501" endtime="20210207 23:11:16.503"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.504" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210207 23:11:16.503" endtime="20210207 23:11:16.504"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.481" endtime="20210207 23:11:16.504"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.480" endtime="20210207 23:11:16.504"></status>
</kw>
<doc>verifies success along with empty response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.479" endtime="20210207 23:11:16.505" critical="yes"></status>
</test>
<test id="s1-s1-t11" name="Check post for specific post ID and title with query parameter">
<kw name="GET post API response for specific post ID and title with query parameter" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
<arg>${POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${postId[0]}</arg>
<arg>title=${titleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.508" level="INFO">${param} = {'id': '1', 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit'}</msg>
<status status="PASS" starttime="20210207 23:11:16.507" endtime="20210207 23:11:16.508"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.530" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?id=1&amp;title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 path_url=/posts/?id=1&amp;title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.530" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?id=1&amp;title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1612753210', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"134-QtF0EaiifRh1Z3cEspXIXV0RoQY"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '4323', 'cf-request-id': '08216f3cb30000ea08faa60000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=LSvLxpPc6peiOw8hAtp%2FZtDlH7lQIPu4DAbMFt3a0WSK48rYN9PNZxmP4olH9OxtUzGThvlEgJpInWlur26cQ7AQxMotTd3mVT8Fiomsh75dXmuf5Loct9sWnRJb"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281744d3dea08-IAD', 'Content-Encoding': 'gzip'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:16.531" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.509" endtime="20210207 23:11:16.531"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.509" endtime="20210207 23:11:16.531"></status>
</kw>
<msg timestamp="20210207 23:11:16.532" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.508" endtime="20210207 23:11:16.532"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.533" endtime="20210207 23:11:16.533"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.534" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:16.534" endtime="20210207 23:11:16.534"></status>
</kw>
<msg timestamp="20210207 23:11:16.535" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210207 23:11:16.532" endtime="20210207 23:11:16.535"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..title</arg>
</arguments>
<assign>
<var>${title}</var>
</assign>
<msg timestamp="20210207 23:11:16.564" level="INFO">${title} = ['sunt aut facere repellat provident occaecati excepturi optio reprehenderit']</msg>
<status status="PASS" starttime="20210207 23:11:16.535" endtime="20210207 23:11:16.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${title[0]}</arg>
<arg>${titleValue}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.564" endtime="20210207 23:11:16.565"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210207 23:11:16.586" level="INFO">${id} = [1]</msg>
<status status="PASS" starttime="20210207 23:11:16.565" endtime="20210207 23:11:16.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${id[0]}</arg>
<arg>${postId[0]}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.587" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.586" endtime="20210207 23:11:16.587"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.507" endtime="20210207 23:11:16.587"></status>
</kw>
<doc>verifies success along with postid and title in response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.505" endtime="20210207 23:11:16.587" critical="yes"></status>
</test>
<test id="s1-s1-t12" name="Check post for incorrect post id and title with query parameter">
<kw name="GET post API response for incorrect post id and title with query parameter" library="GetPostApi">
<arguments>
<arg>${INVALID_POSTID}</arg>
<arg>${INCORRECT_POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${incorrectPostId[0]}</arg>
<arg>title=${incorrectTitleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.589" level="INFO">${param} = {'id': '101', 'title': '@abcd'}</msg>
<status status="PASS" starttime="20210207 23:11:16.588" endtime="20210207 23:11:16.589"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.607" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?id=101&amp;title=%40abcd 
 path_url=/posts/?id=101&amp;title=%40abcd 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.608" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?id=101&amp;title=%40abcd 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612753690', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '3846', 'Accept-Ranges': 'bytes', 'cf-request-id': '08216f3d000000ea083027d000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=KZTba3YVvkx5Etxmijkp6soDnVuOqf2JbEcdluZSeBu9xXIV8CIKuX%2BpR9lfyleRCunHFzPIOR20Dw2IK83VDlNvdxp31XY3MJtnVwDXd9isw4xIGLxoyL9nVyZK"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e28174cdfcea08-IAD'} 
 body=[] 
 </msg>
<msg timestamp="20210207 23:11:16.608" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.590" endtime="20210207 23:11:16.608"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.590" endtime="20210207 23:11:16.608"></status>
</kw>
<msg timestamp="20210207 23:11:16.609" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.589" endtime="20210207 23:11:16.609"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.610" endtime="20210207 23:11:16.611"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.611" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.611" endtime="20210207 23:11:16.612"></status>
</kw>
<msg timestamp="20210207 23:11:16.612" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.609" endtime="20210207 23:11:16.612"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.612" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210207 23:11:16.612" endtime="20210207 23:11:16.612"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.589" endtime="20210207 23:11:16.613"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.588" endtime="20210207 23:11:16.613"></status>
</kw>
<doc>Verifies success along with empty response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.587" endtime="20210207 23:11:16.613" critical="yes"></status>
</test>
<test id="s1-s1-t13" name="Check post comments for specific email id with query parameter">
<kw name="GET API response for post with specific email" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
<arg>${EMAIL}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>email=${validEmailId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.615" level="INFO">${param} = {'email': 'Hayden@althea.biz'}</msg>
<status status="PASS" starttime="20210207 23:11:16.615" endtime="20210207 23:11:16.615"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}${postId[0]}${COMMENTS_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId[0]}${COMMENTS_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.637" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=Hayden%40althea.biz 
 path_url=/posts/1/comments?email=Hayden%40althea.biz 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.637" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=Hayden%40althea.biz 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612752250', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"116-P7BtySmelhRUOzIBE1sWWjNtSmw"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '5263', 'cf-request-id': '08216f3d1c0000ea0858800000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=7a96Id00GV%2BYYdY2osPaiy3C23OF4PqdpGLXsVcKP164s5skBGSf3DK0mAn63qZyDwpRLl6%2FKrXGNffJGNhy%2BfavHbJ%2BLtjEBrX%2Fh%2BFiy%2BNVWSB3QFhucGeyL724"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e28174fe6cea08-IAD', 'Content-Encoding': 'gzip'} 
 body=[
  {
    "postId": 1,
    "id": 5,
    "name": "vero eaque aliquid doloribus et culpa",
    "email": "Hayden@althea.biz",
    "body": "harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugit inventore cupiditate\nvoluptates magni quo et"
  }
] 
 </msg>
<msg timestamp="20210207 23:11:16.638" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.616" endtime="20210207 23:11:16.638"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.616" endtime="20210207 23:11:16.638"></status>
</kw>
<msg timestamp="20210207 23:11:16.638" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.615" endtime="20210207 23:11:16.638"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.640" endtime="20210207 23:11:16.641"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.642" level="INFO">${jsonObject} = [{'postId': 1, 'id': 5, 'name': 'vero eaque aliquid doloribus et culpa', 'email': 'Hayden@althea.biz', 'body': 'harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugi...</msg>
<status status="PASS" starttime="20210207 23:11:16.641" endtime="20210207 23:11:16.642"></status>
</kw>
<msg timestamp="20210207 23:11:16.642" level="INFO">${jsonResponse} = [{'postId': 1, 'id': 5, 'name': 'vero eaque aliquid doloribus et culpa', 'email': 'Hayden@althea.biz', 'body': 'harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugi...</msg>
<status status="PASS" starttime="20210207 23:11:16.639" endtime="20210207 23:11:16.643"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..email</arg>
</arguments>
<assign>
<var>${emailId}</var>
</assign>
<msg timestamp="20210207 23:11:16.674" level="INFO">${emailId} = ['Hayden@althea.biz']</msg>
<status status="PASS" starttime="20210207 23:11:16.643" endtime="20210207 23:11:16.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${emailId[0]}</arg>
<arg>${validEmailId}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.674" endtime="20210207 23:11:16.674"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.614" endtime="20210207 23:11:16.674"></status>
</kw>
<doc>Verifies success response along with email id in response</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.613" endtime="20210207 23:11:16.674" critical="yes"></status>
</test>
<test id="s1-s1-t14" name="Check post comments response for incorrect email with query parameter">
<kw name="GET API response for all posts with incorrect email" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
<arg>${INCORRECT_EMAIL}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>email=${incorrectEmailId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210207 23:11:16.676" level="INFO">${param} = {'email': 'abc@gmail.com'}</msg>
<status status="PASS" starttime="20210207 23:11:16.676" endtime="20210207 23:11:16.676"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId[0]}${COMMENTS_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210207 23:11:16.699" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=abc%40gmail.com 
 path_url=/posts/1/comments?email=abc%40gmail.com 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=db62c3081d882fef6d9c69a2355cfb46c1612757475'} 
 body=None 
 </msg>
<msg timestamp="20210207 23:11:16.699" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=abc%40gmail.com 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 04:11:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612752490', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '5034', 'Accept-Ranges': 'bytes', 'cf-request-id': '08216f3d580000ea080a8d5000000001', 'Report-To': '{"max_age":604800,"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=lRgUJXrYXPmTI5mRh7stFbY7zopNy8dMsgovvqo4OsbegJ8BD6zY4h6wL9I7LWJUVYu16V0QewZlQypaX%2F7y4EIKc8MvUvaUFX%2FVDVZN2L5%2FCSiqXuT%2Fvg2RdRTU"}],"group":"cf-nel"}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e281755f78ea08-IAD'} 
 body=[] 
 </msg>
<msg timestamp="20210207 23:11:16.700" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.678" endtime="20210207 23:11:16.700"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210207 23:11:16.677" endtime="20210207 23:11:16.700"></status>
</kw>
<msg timestamp="20210207 23:11:16.700" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210207 23:11:16.677" endtime="20210207 23:11:16.701"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210207 23:11:16.702" endtime="20210207 23:11:16.702"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210207 23:11:16.703" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.702" endtime="20210207 23:11:16.703"></status>
</kw>
<msg timestamp="20210207 23:11:16.703" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210207 23:11:16.701" endtime="20210207 23:11:16.703"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210207 23:11:16.704" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210207 23:11:16.704" endtime="20210207 23:11:16.704"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.676" endtime="20210207 23:11:16.704"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.675" endtime="20210207 23:11:16.704"></status>
</kw>
<doc>verifies success along with empty response</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210207 23:11:16.675" endtime="20210207 23:11:16.705" critical="yes"></status>
</test>
<kw name="Suite Teardown" library="Common" type="teardown">
<kw name="Delete All Sessions" library="RequestsLibrary">
<doc>Removes all the session objects</doc>
<msg timestamp="20210207 23:11:16.706" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20210207 23:11:16.706" endtime="20210207 23:11:16.707"></status>
</kw>
<status status="PASS" starttime="20210207 23:11:16.706" endtime="20210207 23:11:16.707"></status>
</kw>
<doc>To verify HTTP GET requests scenarios for /posts route.</doc>
<status status="PASS" starttime="20210207 23:11:15.239" endtime="20210207 23:11:16.707"></status>
</suite>
<status status="PASS" starttime="20210207 23:11:15.211" endtime="20210207 23:11:16.710"></status>
</suite>
<statistics>
<total>
<stat pass="14" fail="0">Critical Tests</stat>
<stat pass="14" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0">postCommentsRoute</stat>
<stat pass="10" fail="0">postRoute</stat>
</tag>
<suite>
<stat pass="14" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="14" fail="0" id="s1-s1" name="PostApiTest">Tests.PostApiTest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
