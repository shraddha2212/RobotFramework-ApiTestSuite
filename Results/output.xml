<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on darwin)" generated="20210208 08:41:46.990" rpa="false">
<suite id="s1" name="Tests" source="/Users/shraddhapulse/PycharmProjects/ApiTesting/Tests">
<suite id="s1-s1" name="PostApiTest" source="/Users/shraddhapulse/PycharmProjects/ApiTesting/Tests/PostApiTest.robot">
<kw name="Suite Setup" library="Common" type="setup">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>${BASE_URL}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.180" level="INFO">Creating Session using : alias=jsonplaceholder, url=http://jsonplaceholder.typicode.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210208 08:41:47.179" endtime="20210208 08:41:47.180"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.179" endtime="20210208 08:41:47.180"></status>
</kw>
<test id="s1-s1-t1" name="To verify all posts for all users and validate response fields">
<kw name="Get API Response For Post Route" library="GetPostApi">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.238" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/ 
 path_url=/posts/ 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.238" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/ 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Set-Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707; expires=Wed, 10-Mar-21 13:41:47 GMT; path=/; domain=.typicode.com; HttpOnly; SameSite=Lax', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1607574725', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"6b80-Ybsq/K6GwwqrYkAsFxqDXGC7DoM"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '20846', 'cf-request-id': '0823798e680000e7482b2a3000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=JkEOASrvvxcfP%2B96Fcmz0qYZ07fCJ4pGxrs2WGM7DksjxVzdmTrZU1KKXe%2BEtBw4tTFGAef%2F9it09IOJQxCikLzU5B15T%2FXNni1YkpG3dQHEiZyKHf0LXWkfeftw"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52a48cbe748-EWR'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  },
  {
    "userId": 1,
    "id": 2,
    "title": "qui est esse",
    "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
  },
  {
    "userId": 1,
    "id": 3,
    "title": "ea molestias quasi exercitationem repellat qui ipsa sit aut",
    "body": "et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accusantium quis pariatur\nmolestiae porro eius odio et labore et velit aut"
  },
  {
    "userId": 1,
    "id": 4,
    "title": "eum et est occaecati",
    "body": "ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\nquis sunt voluptatem rerum illo velit"
  },
  {
    "userId": 1,
    "id": 5,
    "title": "nesciunt quas odio",
    "body": "repudiandae veniam quaerat sunt sed\nalias aut fugiat sit autem sed est\nvoluptatem omnis possimus esse voluptatibus quis\nest aut tenetur dolor neque"
  },
  {
    "userId": 1,
    "id": 6,
    "title": "dolorem eum magni eos aperiam quia",
    "body": "ut aspernatur corporis harum nihil quis provident sequi\nmollitia nobis aliquid molestiae\nperspiciatis et ea nemo ab reprehenderit accusantium quas\nvoluptate dolores velit et doloremque molestiae"
  },
  {
    "userId": 1,
    "id": 7,
    "title": "magnam facilis autem",
    "body": "dolore placeat quibusdam ea quo vitae\nmagni quis enim qui quis quo nemo aut saepe\nquidem repellat excepturi ut quia\nsunt ut sequi eos ea sed quas"
  },
  {
    "userId": 1,
    "id": 8,
    "title": "dolorem dolore est ipsam",
    "body": "dignissimos aperiam dolorem qui eum\nfacilis quibusdam animi sint suscipit qui sint possimus cum\nquaerat magni maiores excepturi\nipsam ut commodi dolor voluptatum modi aut vitae"
  },
  {
    "userId": 1,
    "id": 9,
    "title": "nesciunt iure omnis dolorem tempora et accusantium",
    "body": "consectetur animi nesciunt iure dolore\nenim quia ad\nveniam autem ut quam aut nobis\net est aut quod aut provident voluptas autem voluptas"
  },
  {
    "userId": 1,
    "id": 10,
    "title": "optio molestias id quia eum",
    "body": "quo et expedita modi cum officia vel magni\ndoloribus qui repudiandae\nvero nisi sit\nquos veniam quod sed accusamus veritatis error"
  },
  {
    "userId": 2,
    "id": 11,
    "title": "et ea vero quia laudantium autem",
    "body": "delectus reiciendis molestiae occaecati non minima eveniet qui voluptatibus\naccusamus in eum beatae sit\nvel qui neque voluptates ut commodi qui incidunt\nut animi commodi"
  },
  {
    "userId": 2,
    "id": 12,
    "title": "in quibusdam tempore odit est dolorem",
    "body": "itaque id aut magnam\npraesentium quia et ea odit et ea voluptas et\nsapiente quia nihil amet occaecati quia id voluptatem\nincidunt ea est distinctio odio"
  },
  {
    "userId": 2,
    "id": 13,
    "title": "dolorum ut in voluptas mollitia et saepe quo animi",
    "body": "aut dicta possimus sint mollitia voluptas commodi quo doloremque\niste corrupti reiciendis voluptatem eius rerum\nsit cumque quod eligendi laborum minima\nperferendis recusandae assumenda consectetur porro architecto ipsum ipsam"
  },
  {
    "userId": 2,
    "id": 14,
    "title": "voluptatem eligendi optio",
    "body": "fuga et accusamus dolorum perferendis illo voluptas\nnon doloremque neque facere\nad qui dolorum molestiae beatae\nsed aut voluptas totam sit illum"
  },
  {
    "userId": 2,
    "id": 15,
    "title": "eveniet quod temporibus",
    "body": "reprehenderit quos placeat\nvelit minima officia dolores impedit repudiandae molestiae nam\nvoluptas recusandae quis delectus\nofficiis harum fugiat vitae"
  },
  {
    "userId": 2,
    "id": 16,
    "title": "sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio",
    "body": "suscipit nam nisi quo aperiam aut\nasperiores eos fugit maiores voluptatibus quia\nvoluptatem quis ullam qui in alias quia est\nconsequatur magni mollitia accusamus ea nisi voluptate dicta"
  },
  {
    "userId": 2,
    "id": 17,
    "title": "fugit voluptas sed molestias voluptatem provident",
    "body": "eos voluptas et aut odit natus earum\naspernatur fuga molestiae ullam\ndeserunt ratione qui eos\nqui nihil ratione nemo velit ut aut id quo"
  },
  {
    "userId": 2,
    "id": 18,
    "title": "voluptate et itaque vero tempora molestiae",
    "body": "eveniet quo quis\nlaborum totam consequatur non dolor\nut et est repudiandae\nest voluptatem vel debitis et magnam"
  },
  {
    "userId": 2,
    "id": 19,
    "title": "adipisci placeat illum aut reiciendis qui",
    "body": "illum quis cupiditate provident sit magnam\nea sed aut omnis\nveniam maiores ullam consequatur atque\nadipisci quo iste expedita sit quos voluptas"
  },
  {
    "userId": 2,
    "id": 20,
    "title": "doloribus ad provident suscipit at",
    "body": "qui consequuntur ducimus possimus quisquam amet similique\nsuscipit porro ipsam amet\neos veritatis officiis exercitationem vel fugit aut necessitatibus totam\nomnis rerum consequatur expedita quidem cumque explicabo"
  },
  {
    "userId": 3,
    "id": 21,
    "title": "asperiores ea ipsam voluptatibus modi minima quia sint",
    "body": "repellat aliquid praesentium dolorem quo\nsed totam minus non itaque\nnihil labore molestiae sunt dolor eveniet hic recusandae veniam\ntempora et tenetur expedita sunt"
  },
  {
    "userId": 3,
    "id": 22,
    "title": "dolor sint quo a velit explicabo quia nam",
    "body": "eos qui et ipsum ipsam suscipit aut\nsed omnis non odio\nexpedita earum mollitia molestiae aut atque rem suscipit\nnam impedit esse"
  },
  {
    "userId": 3,
    "id": 23,
    "title": "maxime id vitae nihil numquam",
    "body": "veritatis unde neque eligendi\nquae quod architecto quo neque vitae\nest illo sit tempora doloremque fugit quod\net et vel beatae sequi ullam sed tenetur perspiciatis"
  },
  {
    "userId": 3,
    "id": 24,
    "title": "autem hic labore sunt dolores incidunt",
    "body": "enim et ex nulla\nomnis voluptas quia qui\nvoluptatem consequatur numquam aliquam sunt\ntotam recusandae id dignissimos aut sed asperiores deserunt"
  },
  {
    "userId": 3,
    "id": 25,
    "title": "rem alias distinctio quo quis",
    "body": "ullam consequatur ut\nomnis quis sit vel consequuntur\nipsa eligendi ipsum molestiae et omnis error nostrum\nmolestiae illo tempore quia et distinctio"
  },
  {
    "userId": 3,
    "id": 26,
    "title": "est et quae odit qui non",
    "body": "similique esse doloribus nihil accusamus\nomnis dolorem fuga consequuntur reprehenderit fugit recusandae temporibus\nperspiciatis cum ut laudantium\nomnis aut molestiae vel vero"
  },
  {
    "userId": 3,
    "id": 27,
    "title": "quasi id et eos tenetur aut quo autem",
    "body": "eum sed dolores ipsam sint possimus debitis occaecati\ndebitis qui qui et\nut placeat enim earum aut odit facilis\nconsequatur suscipit necessitatibus rerum sed inventore temporibus consequatur"
  },
  {
    "userId": 3,
    "id": 28,
    "title": "delectus ullam et corporis nulla voluptas sequi",
    "body": "non et quaerat ex quae ad maiores\nmaiores recusandae totam aut blanditiis mollitia quas illo\nut voluptatibus voluptatem\nsimilique nostrum eum"
  },
  {
    "userId": 3,
    "id": 29,
    "title": "iusto eius quod necessitatibus culpa ea",
    "body": "odit magnam ut saepe sed non qui\ntempora atque nihil\naccusamus illum doloribus illo dolor\neligendi repudiandae odit magni similique sed cum maiores"
  },
  {
    "userId": 3,
    "id": 30,
    "title": "a quo magni similique perferendis",
    "body": "alias dolor cumque\nimpedit blanditiis non eveniet odio maxime\nblanditiis amet eius quis tempora quia autem rem\na provident perspiciatis quia"
  },
  {
    "userId": 4,
    "id": 31,
    "title": "ullam ut quidem id aut vel consequuntur",
    "body": "debitis eius sed quibusdam non quis consectetur vitae\nimpedit ut qui consequatur sed aut in\nquidem sit nostrum et maiores adipisci atque\nquaerat voluptatem adipisci repudiandae"
  },
  {
    "userId": 4,
    "id": 32,
    "title": "doloremque illum aliquid sunt",
    "body": "deserunt eos nobis asperiores et hic\nest debitis repellat molestiae optio\nnihil ratione ut eos beatae quibusdam distinctio maiores\nearum voluptates et aut adipisci ea maiores voluptas maxime"
  },
  {
    "userId": 4,
    "id": 33,
    "title": "qui explicabo molestiae dolorem",
    "body": "rerum ut et numquam laborum odit est sit\nid qui sint in\nquasi tenetur tempore aperiam et quaerat qui in\nrerum officiis sequi cumque quod"
  },
  {
    "userId": 4,
    "id": 34,
    "title": "magnam ut rerum iure",
    "body": "ea velit perferendis earum ut voluptatem voluptate itaque iusto\ntotam pariatur in\nnemo voluptatem voluptatem autem magni tempora minima in\nest distinctio qui assumenda accusamus dignissimos officia nesciunt nobis"
  },
  {
    "userId": 4,
    "id": 35,
    "title": "id nihil consequatur molestias animi provident",
    "body": "nisi error delectus possimus ut eligendi vitae\nplaceat eos harum cupiditate facilis reprehenderit voluptatem beatae\nmodi ducimus quo illum voluptas eligendi\net nobis quia fugit"
  },
  {
    "userId": 4,
    "id": 36,
    "title": "fuga nam accusamus voluptas reiciendis itaque",
    "body": "ad mollitia et omnis minus architecto odit\nvoluptas doloremque maxime aut non ipsa qui alias veniam\nblanditiis culpa aut quia nihil cumque facere et occaecati\nqui aspernatur quia eaque ut aperiam inventore"
  },
  {
    "userId": 4,
    "id": 37,
    "title": "provident vel ut sit ratione est... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20210208 08:41:47.239" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.182" endtime="20210208 08:41:47.239"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.182" endtime="20210208 08:41:47.239"></status>
</kw>
<msg timestamp="20210208 08:41:47.240" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.182" endtime="20210208 08:41:47.240"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.240" endtime="20210208 08:41:47.241"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.243" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:47.241" endtime="20210208 08:41:47.243"></status>
</kw>
<msg timestamp="20210208 08:41:47.244" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:47.240" endtime="20210208 08:41:47.244"></status>
</kw>
<kw name="${postobject} IN [ @{jsonResponse} ]" type="for">
<kw name="${postobject} = {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.244" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.244" endtime="20210208 08:41:47.244"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.245" endtime="20210208 08:41:47.245"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.244" endtime="20210208 08:41:47.245"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 2, 'title': 'qui est esse', 'body': 'est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.246" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.245" endtime="20210208 08:41:47.246"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.246" endtime="20210208 08:41:47.246"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.245" endtime="20210208 08:41:47.246"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 3, 'title': 'ea molestias quasi exercitationem repellat qui ipsa sit aut', 'body': 'et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.247" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.247" endtime="20210208 08:41:47.247"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.247" endtime="20210208 08:41:47.248"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.246" endtime="20210208 08:41:47.248"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur do..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.248" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.248" endtime="20210208 08:41:47.248"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.248" endtime="20210208 08:41:47.249"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.248" endtime="20210208 08:41:47.249"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 5, 'title': 'nesciunt quas odio', 'body': 'repudiandae veniam quaerat sunt sed\nalias aut fugiat sit autem sed est\nvoluptatem omnis possimus esse voluptatibus quis\nest aut tenetu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.249" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.249" endtime="20210208 08:41:47.249"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.250" endtime="20210208 08:41:47.250"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.249" endtime="20210208 08:41:47.250"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'body': 'ut aspernatur corporis harum nihil quis provident sequi\nmollitia nobis aliquid molestiae\nperspiciatis et ea nemo ab rep..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.251" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.250" endtime="20210208 08:41:47.251"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.251" endtime="20210208 08:41:47.251"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.250" endtime="20210208 08:41:47.251"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 7, 'title': 'magnam facilis autem', 'body': 'dolore placeat quibusdam ea quo vitae\nmagni quis enim qui quis quo nemo aut saepe\nquidem repellat excepturi ut quia\nsunt ut sequi eo..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.252" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.251" endtime="20210208 08:41:47.252"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.252" endtime="20210208 08:41:47.252"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.251" endtime="20210208 08:41:47.252"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 8, 'title': 'dolorem dolore est ipsam', 'body': 'dignissimos aperiam dolorem qui eum\nfacilis quibusdam animi sint suscipit qui sint possimus cum\nquaerat magni maiores excepturi\n..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.253" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.253" endtime="20210208 08:41:47.253"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.253" endtime="20210208 08:41:47.253"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.252" endtime="20210208 08:41:47.253"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 9, 'title': 'nesciunt iure omnis dolorem tempora et accusantium', 'body': 'consectetur animi nesciunt iure dolore\nenim quia ad\nveniam autem ut quam aut nobis\net est aut quod aut..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.254" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.254" endtime="20210208 08:41:47.254"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.254" endtime="20210208 08:41:47.254"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.253" endtime="20210208 08:41:47.254"></status>
</kw>
<kw name="${postobject} = {'userId': 1, 'id': 10, 'title': 'optio molestias id quia eum', 'body': 'quo et expedita modi cum officia vel magni\ndoloribus qui repudiandae\nvero nisi sit\nquos veniam quod sed accusamus veritatis ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.255" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.254" endtime="20210208 08:41:47.255"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.255" endtime="20210208 08:41:47.255"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.254" endtime="20210208 08:41:47.255"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 11, 'title': 'et ea vero quia laudantium autem', 'body': 'delectus reiciendis molestiae occaecati non minima eveniet qui voluptatibus\naccusamus in eum beatae sit\nvel qui neque vo..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.256" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.255" endtime="20210208 08:41:47.256"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.256" endtime="20210208 08:41:47.256"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.255" endtime="20210208 08:41:47.256"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 12, 'title': 'in quibusdam tempore odit est dolorem', 'body': 'itaque id aut magnam\npraesentium quia et ea odit et ea voluptas et\nsapiente quia nihil amet occaecati quia id volup..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.256" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.256" endtime="20210208 08:41:47.257"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.257" endtime="20210208 08:41:47.257"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.256" endtime="20210208 08:41:47.257"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 13, 'title': 'dolorum ut in voluptas mollitia et saepe quo animi', 'body': 'aut dicta possimus sint mollitia voluptas commodi quo doloremque\niste corrupti reiciendis voluptatem ei..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.257" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.257" endtime="20210208 08:41:47.257"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.258" endtime="20210208 08:41:47.258"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.257" endtime="20210208 08:41:47.258"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 14, 'title': 'voluptatem eligendi optio', 'body': 'fuga et accusamus dolorum perferendis illo voluptas\nnon doloremque neque facere\nad qui dolorum molestiae beatae\nsed aut volupt..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.258" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.258" endtime="20210208 08:41:47.258"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.259" endtime="20210208 08:41:47.259"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.258" endtime="20210208 08:41:47.259"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 15, 'title': 'eveniet quod temporibus', 'body': 'reprehenderit quos placeat\nvelit minima officia dolores impedit repudiandae molestiae nam\nvoluptas recusandae quis delectus\noffi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.259" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.259" endtime="20210208 08:41:47.259"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.259" endtime="20210208 08:41:47.260"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.259" endtime="20210208 08:41:47.260"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 16, 'title': 'sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio', 'body': 'suscipit nam nisi quo aperiam aut\nasperiores eos fugit maiores voluptatibus quia\nvolu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.260" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.260" endtime="20210208 08:41:47.260"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.260" endtime="20210208 08:41:47.261"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.260" endtime="20210208 08:41:47.261"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 17, 'title': 'fugit voluptas sed molestias voluptatem provident', 'body': 'eos voluptas et aut odit natus earum\naspernatur fuga molestiae ullam\ndeserunt ratione qui eos\nqui nihi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.261" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.261" endtime="20210208 08:41:47.261"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.261" endtime="20210208 08:41:47.261"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.261" endtime="20210208 08:41:47.261"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 18, 'title': 'voluptate et itaque vero tempora molestiae', 'body': 'eveniet quo quis\nlaborum totam consequatur non dolor\nut et est repudiandae\nest voluptatem vel debitis et magn..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.262" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.262" endtime="20210208 08:41:47.262"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.262" endtime="20210208 08:41:47.262"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.262" endtime="20210208 08:41:47.262"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 19, 'title': 'adipisci placeat illum aut reiciendis qui', 'body': 'illum quis cupiditate provident sit magnam\nea sed aut omnis\nveniam maiores ullam consequatur atque\nadipisci qu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.263" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.262" endtime="20210208 08:41:47.263"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.263" endtime="20210208 08:41:47.263"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.262" endtime="20210208 08:41:47.263"></status>
</kw>
<kw name="${postobject} = {'userId': 2, 'id': 20, 'title': 'doloribus ad provident suscipit at', 'body': 'qui consequuntur ducimus possimus quisquam amet similique\nsuscipit porro ipsam amet\neos veritatis officiis exercitatio..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.264" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.263" endtime="20210208 08:41:47.264"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.264" endtime="20210208 08:41:47.264"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.263" endtime="20210208 08:41:47.264"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 21, 'title': 'asperiores ea ipsam voluptatibus modi minima quia sint', 'body': 'repellat aliquid praesentium dolorem quo\nsed totam minus non itaque\nnihil labore molestiae sunt do..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.265" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.264" endtime="20210208 08:41:47.265"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.265" endtime="20210208 08:41:47.265"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.264" endtime="20210208 08:41:47.265"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 22, 'title': 'dolor sint quo a velit explicabo quia nam', 'body': 'eos qui et ipsum ipsam suscipit aut\nsed omnis non odio\nexpedita earum mollitia molestiae aut atque rem suscipit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.266" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.266" endtime="20210208 08:41:47.266"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.266" endtime="20210208 08:41:47.266"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.265" endtime="20210208 08:41:47.266"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 23, 'title': 'maxime id vitae nihil numquam', 'body': 'veritatis unde neque eligendi\nquae quod architecto quo neque vitae\nest illo sit tempora doloremque fugit quod\net et vel be..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.267" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.266" endtime="20210208 08:41:47.267"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.267" endtime="20210208 08:41:47.267"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.266" endtime="20210208 08:41:47.267"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 24, 'title': 'autem hic labore sunt dolores incidunt', 'body': 'enim et ex nulla\nomnis voluptas quia qui\nvoluptatem consequatur numquam aliquam sunt\ntotam recusandae id dignissi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.267" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.267" endtime="20210208 08:41:47.267"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.268" endtime="20210208 08:41:47.268"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.267" endtime="20210208 08:41:47.268"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 25, 'title': 'rem alias distinctio quo quis', 'body': 'ullam consequatur ut\nomnis quis sit vel consequuntur\nipsa eligendi ipsum molestiae et omnis error nostrum\nmolestiae illo t..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.268" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.268" endtime="20210208 08:41:47.268"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.268" endtime="20210208 08:41:47.269"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.268" endtime="20210208 08:41:47.269"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 26, 'title': 'est et quae odit qui non', 'body': 'similique esse doloribus nihil accusamus\nomnis dolorem fuga consequuntur reprehenderit fugit recusandae temporibus\nperspiciatis ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.269" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.269" endtime="20210208 08:41:47.269"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.269" endtime="20210208 08:41:47.269"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.269" endtime="20210208 08:41:47.269"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 27, 'title': 'quasi id et eos tenetur aut quo autem', 'body': 'eum sed dolores ipsam sint possimus debitis occaecati\ndebitis qui qui et\nut placeat enim earum aut odit facilis\nco..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.270" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.270" endtime="20210208 08:41:47.270"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.270" endtime="20210208 08:41:47.270"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.269" endtime="20210208 08:41:47.270"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 28, 'title': 'delectus ullam et corporis nulla voluptas sequi', 'body': 'non et quaerat ex quae ad maiores\nmaiores recusandae totam aut blanditiis mollitia quas illo\nut voluptati..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.271" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.270" endtime="20210208 08:41:47.271"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.271" endtime="20210208 08:41:47.271"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.270" endtime="20210208 08:41:47.271"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 29, 'title': 'iusto eius quod necessitatibus culpa ea', 'body': 'odit magnam ut saepe sed non qui\ntempora atque nihil\naccusamus illum doloribus illo dolor\neligendi repudiandae o..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.271" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.271" endtime="20210208 08:41:47.271"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.272" endtime="20210208 08:41:47.272"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.271" endtime="20210208 08:41:47.272"></status>
</kw>
<kw name="${postobject} = {'userId': 3, 'id': 30, 'title': 'a quo magni similique perferendis', 'body': 'alias dolor cumque\nimpedit blanditiis non eveniet odio maxime\nblanditiis amet eius quis tempora quia autem rem\na provi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.272" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.272" endtime="20210208 08:41:47.272"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.272" endtime="20210208 08:41:47.273"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.272" endtime="20210208 08:41:47.273"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 31, 'title': 'ullam ut quidem id aut vel consequuntur', 'body': 'debitis eius sed quibusdam non quis consectetur vitae\nimpedit ut qui consequatur sed aut in\nquidem sit nostrum et..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.273" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.273" endtime="20210208 08:41:47.273"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.273" endtime="20210208 08:41:47.273"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.273" endtime="20210208 08:41:47.273"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 32, 'title': 'doloremque illum aliquid sunt', 'body': 'deserunt eos nobis asperiores et hic\nest debitis repellat molestiae optio\nnihil ratione ut eos beatae quibusdam distinctio ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.274" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.274" endtime="20210208 08:41:47.274"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.274" endtime="20210208 08:41:47.274"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.273" endtime="20210208 08:41:47.274"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 33, 'title': 'qui explicabo molestiae dolorem', 'body': 'rerum ut et numquam laborum odit est sit\nid qui sint in\nquasi tenetur tempore aperiam et quaerat qui in\nrerum officiis s..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.275" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.274" endtime="20210208 08:41:47.275"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.275" endtime="20210208 08:41:47.275"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.274" endtime="20210208 08:41:47.275"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 34, 'title': 'magnam ut rerum iure', 'body': 'ea velit perferendis earum ut voluptatem voluptate itaque iusto\ntotam pariatur in\nnemo voluptatem voluptatem autem magni tempora min..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.275" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.275" endtime="20210208 08:41:47.275"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.275" endtime="20210208 08:41:47.276"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.275" endtime="20210208 08:41:47.276"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 35, 'title': 'id nihil consequatur molestias animi provident', 'body': 'nisi error delectus possimus ut eligendi vitae\nplaceat eos harum cupiditate facilis reprehenderit voluptate..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.276" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.276" endtime="20210208 08:41:47.276"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.276" endtime="20210208 08:41:47.277"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.276" endtime="20210208 08:41:47.277"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 36, 'title': 'fuga nam accusamus voluptas reiciendis itaque', 'body': 'ad mollitia et omnis minus architecto odit\nvoluptas doloremque maxime aut non ipsa qui alias veniam\nblandit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.277" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.277" endtime="20210208 08:41:47.277"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.277" endtime="20210208 08:41:47.277"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.277" endtime="20210208 08:41:47.277"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 37, 'title': 'provident vel ut sit ratione est', 'body': 'debitis et eaque non officia sed nesciunt pariatur vel\nvoluptatem iste vero et ea\nnumquam aut expedita ipsum nulla in\nv..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.278" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.278" endtime="20210208 08:41:47.278"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.278" endtime="20210208 08:41:47.278"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.277" endtime="20210208 08:41:47.278"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 38, 'title': 'explicabo et eos deleniti nostrum ab id repellendus', 'body': 'animi esse sit aut sit nesciunt assumenda eum voluptas\nquia voluptatibus provident quia necessitatibus..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.278" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.278" endtime="20210208 08:41:47.279"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.279" endtime="20210208 08:41:47.279"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.278" endtime="20210208 08:41:47.279"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 39, 'title': 'eos dolorem iste accusantium est eaque quam', 'body': 'corporis rerum ducimus vel eum accusantium\nmaxime aspernatur a porro possimus iste omnis\nest in deleniti aspe..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.279" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.279" endtime="20210208 08:41:47.279"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.279" endtime="20210208 08:41:47.280"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.279" endtime="20210208 08:41:47.280"></status>
</kw>
<kw name="${postobject} = {'userId': 4, 'id': 40, 'title': 'enim quo cumque', 'body': 'ut voluptatum aliquid illo tenetur nemo sequi quo facilis\nipsum rem optio mollitia quas\nvoluptatem eum voluptas qui\nunde omnis voluptate..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.280" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.280" endtime="20210208 08:41:47.280"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.280" endtime="20210208 08:41:47.280"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.280" endtime="20210208 08:41:47.280"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 41, 'title': 'non est facere', 'body': 'molestias id nostrum\nexcepturi molestiae dolore omnis repellendus quaerat saepe\nconsectetur iste quaerat tenetur asperiores accusamus ex u..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.281" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.281" endtime="20210208 08:41:47.281"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.281" endtime="20210208 08:41:47.281"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.281" endtime="20210208 08:41:47.282"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 42, 'title': 'commodi ullam sint et excepturi error explicabo praesentium voluptas', 'body': 'odio fugit voluptatum ducimus earum autem est incidunt voluptatem\nodit reiciendis ali..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.282" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.282" endtime="20210208 08:41:47.282"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.282" endtime="20210208 08:41:47.282"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.282" endtime="20210208 08:41:47.282"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 43, 'title': 'eligendi iste nostrum consequuntur adipisci praesentium sit beatae perferendis', 'body': 'similique fugit est\nillum et dolorum harum et voluptate eaque quidem\nexerc..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.283" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.283" endtime="20210208 08:41:47.283"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.283" endtime="20210208 08:41:47.283"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.282" endtime="20210208 08:41:47.283"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 44, 'title': 'optio dolor molestias sit', 'body': 'temporibus est consectetur dolore\net libero debitis vel velit laboriosam quia\nipsum quibusdam qui itaque fuga rem aut\nea et iu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.284" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.283" endtime="20210208 08:41:47.284"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.284" endtime="20210208 08:41:47.284"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.283" endtime="20210208 08:41:47.284"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 45, 'title': 'ut numquam possimus omnis eius suscipit laudantium iure', 'body': 'est natus reiciendis nihil possimus aut provident\nex et dolor\nrepellat pariatur est\nnobis rerum ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.284" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.284" endtime="20210208 08:41:47.284"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.285" endtime="20210208 08:41:47.285"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.284" endtime="20210208 08:41:47.285"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 46, 'title': 'aut quo modi neque nostrum ducimus', 'body': 'voluptatem quisquam iste\nvoluptatibus natus officiis facilis dolorem\nquis quas ipsam\nvel et voluptatum in aliquid'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.285" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.285" endtime="20210208 08:41:47.285"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.285" endtime="20210208 08:41:47.285"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.285" endtime="20210208 08:41:47.285"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 47, 'title': 'quibusdam cumque rem aut deserunt', 'body': 'voluptatem assumenda ut qui ut cupiditate aut impedit veniam\noccaecati nemo illum voluptatem laudantium\nmolestiae beata..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.286" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.286" endtime="20210208 08:41:47.286"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.286" endtime="20210208 08:41:47.286"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.286" endtime="20210208 08:41:47.286"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 48, 'title': 'ut voluptatem illum ea doloribus itaque eos', 'body': 'voluptates quo voluptatem facilis iure occaecati\nvel assumenda rerum officia et\nillum perspiciatis ab delenit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.287" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.286" endtime="20210208 08:41:47.287"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.287" endtime="20210208 08:41:47.287"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.286" endtime="20210208 08:41:47.287"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 49, 'title': 'laborum non sunt aut ut assumenda perspiciatis voluptas', 'body': 'inventore ab sint\nnatus fugit id nulla sequi architecto nihil quaerat\neos tenetur in in eum verit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.287" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.287" endtime="20210208 08:41:47.287"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.288" endtime="20210208 08:41:47.288"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.287" endtime="20210208 08:41:47.288"></status>
</kw>
<kw name="${postobject} = {'userId': 5, 'id': 50, 'title': 'repellendus qui recusandae incidunt voluptates tenetur qui omnis exercitationem', 'body': 'error suscipit maxime adipisci consequuntur recusandae\nvoluptas eligendi e..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.288" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.288" endtime="20210208 08:41:47.288"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.288" endtime="20210208 08:41:47.288"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.288" endtime="20210208 08:41:47.289"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 51, 'title': 'soluta aliquam aperiam consequatur illo quis voluptas', 'body': 'sunt dolores aut doloribus\ndolore doloribus voluptates tempora et\ndoloremque et quo\ncum asperiores..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.289" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.289" endtime="20210208 08:41:47.289"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.289" endtime="20210208 08:41:47.289"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.289" endtime="20210208 08:41:47.289"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 52, 'title': 'qui enim et consequuntur quia animi quis voluptate quibusdam', 'body': 'iusto est quibusdam fuga quas quaerat molestias\na enim ut sit accusamus enim\ntemporibus iust..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.290" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.289" endtime="20210208 08:41:47.290"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.290" endtime="20210208 08:41:47.290"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.289" endtime="20210208 08:41:47.290"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 53, 'title': 'ut quo aut ducimus alias', 'body': 'minima harum praesentium eum rerum illo dolore\nquasi exercitationem rerum nam\nporro quis neque quo\nconsequatur minus dolor quid..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.290" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.290" endtime="20210208 08:41:47.290"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.291" endtime="20210208 08:41:47.291"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.290" endtime="20210208 08:41:47.291"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 54, 'title': 'sit asperiores ipsam eveniet odio non quia', 'body': 'totam corporis dignissimos\nvitae dolorem ut occaecati accusamus\nex velit deserunt\net exercitationem vero inci..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.291" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.291" endtime="20210208 08:41:47.291"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.291" endtime="20210208 08:41:47.291"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.291" endtime="20210208 08:41:47.291"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 55, 'title': 'sit vel voluptatem et non libero', 'body': 'debitis excepturi ea perferendis harum libero optio\neos accusamus cum fuga ut sapiente repudiandae\net ut incidunt omnis ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.292" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.292" endtime="20210208 08:41:47.292"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.292" endtime="20210208 08:41:47.292"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.292" endtime="20210208 08:41:47.292"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 56, 'title': 'qui et at rerum necessitatibus', 'body': 'aut est omnis dolores\nneque rerum quod ea rerum velit pariatur beatae excepturi\net provident voluptas corrupti\ncorporis h..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.293" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.292" endtime="20210208 08:41:47.293"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.293" endtime="20210208 08:41:47.293"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.292" endtime="20210208 08:41:47.293"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 57, 'title': 'sed ab est est', 'body': 'at pariatur consequuntur earum quidem\nquo est laudantium soluta voluptatem\nqui ullam et est\net cum voluptas voluptatum repellat est'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.293" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.293" endtime="20210208 08:41:47.293"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.293" endtime="20210208 08:41:47.294"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.293" endtime="20210208 08:41:47.294"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 58, 'title': 'voluptatum itaque dolores nisi et quasi', 'body': 'veniam voluptatum quae adipisci id\net id quia eos ad et dolorem\naliquam quo nisi sunt eos impedit error\nad simil..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.294" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.294" endtime="20210208 08:41:47.294"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.294" endtime="20210208 08:41:47.294"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.294" endtime="20210208 08:41:47.294"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 59, 'title': 'qui commodi dolor at maiores et quis id accusantium', 'body': 'perspiciatis et quam ea autem temporibus non voluptatibus qui\nbeatae a earum officia nesciunt dolores ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.295" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.295" endtime="20210208 08:41:47.295"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.295" endtime="20210208 08:41:47.295"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.294" endtime="20210208 08:41:47.295"></status>
</kw>
<kw name="${postobject} = {'userId': 6, 'id': 60, 'title': 'consequatur placeat omnis quisquam quia reprehenderit fugit veritatis facere', 'body': 'asperiores sunt ab assumenda cumque modi velit\nqui esse omnis\nvoluptate et f..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.296" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.295" endtime="20210208 08:41:47.296"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.296" endtime="20210208 08:41:47.296"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.295" endtime="20210208 08:41:47.296"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 61, 'title': 'voluptatem doloribus consectetur est ut ducimus', 'body': 'ab nemo optio odio\ndelectus tenetur corporis similique nobis repellendus rerum omnis facilis\nvero blandit..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.296" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.296" endtime="20210208 08:41:47.296"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.296" endtime="20210208 08:41:47.297"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.296" endtime="20210208 08:41:47.297"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 62, 'title': 'beatae enim quia vel', 'body': 'enim aspernatur illo distinctio quae praesentium\nbeatae alias amet delectus qui voluptate distinctio\nodit sint accusantium autem omn..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.297" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.297" endtime="20210208 08:41:47.297"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.297" endtime="20210208 08:41:47.298"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.297" endtime="20210208 08:41:47.298"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 63, 'title': 'voluptas blanditiis repellendus animi ducimus error sapiente et suscipit', 'body': 'enim adipisci aspernatur nemo\nnumquam omnis facere dolorem dolor ex quis temporib..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.298" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.298" endtime="20210208 08:41:47.298"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.299" endtime="20210208 08:41:47.299"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.298" endtime="20210208 08:41:47.299"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 64, 'title': 'et fugit quas eum in in aperiam quod', 'body': 'id velit blanditiis\neum ea voluptatem\nmolestiae sint occaecati est eos perspiciatis\nincidunt a error provident eaqu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.299" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.299" endtime="20210208 08:41:47.299"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.299" endtime="20210208 08:41:47.300"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.299" endtime="20210208 08:41:47.300"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 65, 'title': 'consequatur id enim sunt et et', 'body': 'voluptatibus ex esse\nsint explicabo est aliquid cumque adipisci fuga repellat labore\nmolestiae corrupti ex saepe at asperi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.300" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.300" endtime="20210208 08:41:47.300"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.300" endtime="20210208 08:41:47.300"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.300" endtime="20210208 08:41:47.300"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 66, 'title': 'repudiandae ea animi iusto', 'body': 'officia veritatis tenetur vero qui itaque\nsint non ratione\nsed et ut asperiores iusto eos molestiae nostrum\nveritatis quibusd..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.301" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.301" endtime="20210208 08:41:47.301"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.301" endtime="20210208 08:41:47.301"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.300" endtime="20210208 08:41:47.301"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 67, 'title': 'aliquid eos sed fuga est maxime repellendus', 'body': 'reprehenderit id nostrum\nvoluptas doloremque pariatur sint et accusantium quia quod aspernatur\net fugiat amet..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.302" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.301" endtime="20210208 08:41:47.302"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.302" endtime="20210208 08:41:47.302"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.301" endtime="20210208 08:41:47.302"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 68, 'title': 'odio quis facere architecto reiciendis optio', 'body': 'magnam molestiae perferendis quisquam\nqui cum reiciendis\nquaerat animi amet hic inventore\nea quia deleniti ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.302" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.302" endtime="20210208 08:41:47.302"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.302" endtime="20210208 08:41:47.303"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.302" endtime="20210208 08:41:47.303"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 69, 'title': 'fugiat quod pariatur odit minima', 'body': 'officiis error culpa consequatur modi asperiores et\ndolorum assumenda voluptas et vel qui aut vel rerum\nvoluptatum quisq..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.303" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.303" endtime="20210208 08:41:47.303"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.303" endtime="20210208 08:41:47.303"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.303" endtime="20210208 08:41:47.303"></status>
</kw>
<kw name="${postobject} = {'userId': 7, 'id': 70, 'title': 'voluptatem laborum magni', 'body': 'sunt repellendus quae\nest asperiores aut deleniti esse accusamus repellendus quia aut\nquia dolorem unde\neum tempora esse dolore..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.304" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.304" endtime="20210208 08:41:47.304"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.304" endtime="20210208 08:41:47.304"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.304" endtime="20210208 08:41:47.304"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 71, 'title': 'et iusto veniam et illum aut fuga', 'body': 'occaecati a doloribus\niste saepe consectetur placeat eum voluptate dolorem et\nqui quo quia voluptas\nrerum ut id enim v..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.305" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.304" endtime="20210208 08:41:47.305"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.305" endtime="20210208 08:41:47.305"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.304" endtime="20210208 08:41:47.305"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 72, 'title': 'sint hic doloribus consequatur eos non id', 'body': 'quam occaecati qui deleniti consectetur\nconsequatur aut facere quas exercitationem aliquam hic voluptas\nneque i..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.305" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.305" endtime="20210208 08:41:47.305"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.305" endtime="20210208 08:41:47.306"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.305" endtime="20210208 08:41:47.306"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 73, 'title': 'consequuntur deleniti eos quia temporibus ab aliquid at', 'body': 'voluptatem cumque tenetur consequatur expedita ipsum nemo quia explicabo\naut eum minima consequatu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.306" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.306" endtime="20210208 08:41:47.306"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.306" endtime="20210208 08:41:47.306"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.306" endtime="20210208 08:41:47.306"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 74, 'title': 'enim unde ratione doloribus quas enim ut sit sapiente', 'body': 'odit qui et et necessitatibus sint veniam\nmollitia amet doloremque molestiae commodi similique magna..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.307" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.307" endtime="20210208 08:41:47.307"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.307" endtime="20210208 08:41:47.307"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.306" endtime="20210208 08:41:47.307"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 75, 'title': 'dignissimos eum dolor ut enim et delectus in', 'body': 'commodi non non omnis et voluptas sit\nautem aut nobis magnam et sapiente voluptatem\net laborum repellat qui ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.308" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.307" endtime="20210208 08:41:47.308"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.308" endtime="20210208 08:41:47.308"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.307" endtime="20210208 08:41:47.308"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 76, 'title': 'doloremque officiis ad et non perferendis', 'body': 'ut animi facere\ntotam iusto tempore\nmolestiae eum aut et dolorem aperiam\nquaerat recusandae totam odio'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.308" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.308" endtime="20210208 08:41:47.308"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.309" endtime="20210208 08:41:47.309"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.308" endtime="20210208 08:41:47.309"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 77, 'title': 'necessitatibus quasi exercitationem odio', 'body': 'modi ut in nulla repudiandae dolorum nostrum eos\naut consequatur omnis\nut incidunt est omnis iste et quam\nvolup..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.309" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.309" endtime="20210208 08:41:47.309"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.309" endtime="20210208 08:41:47.310"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.309" endtime="20210208 08:41:47.310"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 78, 'title': 'quam voluptatibus rerum veritatis', 'body': 'nobis facilis odit tempore cupiditate quia\nassumenda doloribus rerum qui ea\nillum et qui totam\naut veniam repellendus'..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.310" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.310" endtime="20210208 08:41:47.310"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.310" endtime="20210208 08:41:47.310"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.310" endtime="20210208 08:41:47.310"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 79, 'title': 'pariatur consequatur quia magnam autem omnis non amet', 'body': 'libero accusantium et et facere incidunt sit dolorem\nnon excepturi qui quia sed laudantium\nquisquam..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.311" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.310" endtime="20210208 08:41:47.311"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.311" endtime="20210208 08:41:47.311"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.310" endtime="20210208 08:41:47.311"></status>
</kw>
<kw name="${postobject} = {'userId': 8, 'id': 80, 'title': 'labore in ex et explicabo corporis aut quas', 'body': 'ex quod dolorem ea eum iure qui provident amet\nquia qui facere excepturi et repudiandae\nasperiores molestias ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.311" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.311" endtime="20210208 08:41:47.311"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.312" endtime="20210208 08:41:47.312"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.311" endtime="20210208 08:41:47.312"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 81, 'title': 'tempora rem veritatis voluptas quo dolores vero', 'body': 'facere qui nesciunt est voluptatum voluptatem nisi\nsequi eligendi necessitatibus ea at rerum itaque\nharum..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.312" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.312" endtime="20210208 08:41:47.312"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.312" endtime="20210208 08:41:47.313"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.312" endtime="20210208 08:41:47.313"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 82, 'title': 'laudantium voluptate suscipit sunt enim enim', 'body': 'ut libero sit aut totam inventore sunt\nporro sint qui sunt molestiae\nconsequatur cupiditate qui iste ducimus..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.313" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.313" endtime="20210208 08:41:47.313"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.313" endtime="20210208 08:41:47.313"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.313" endtime="20210208 08:41:47.313"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 83, 'title': 'odit et voluptates doloribus alias odio et', 'body': 'est molestiae facilis quis tempora numquam nihil qui\nvoluptate sapiente consequatur est qui\nnecessitatibus aut..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.314" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.313" endtime="20210208 08:41:47.314"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.314" endtime="20210208 08:41:47.314"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.313" endtime="20210208 08:41:47.314"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 84, 'title': 'optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut', 'body': 'sint molestiae magni a et quos\neaque et quasi\nut rerum debitis similique ven..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.314" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.314" endtime="20210208 08:41:47.314"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.314" endtime="20210208 08:41:47.315"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.314" endtime="20210208 08:41:47.315"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 85, 'title': 'dolore veritatis porro provident adipisci blanditiis et sunt', 'body': 'similique sed nisi voluptas iusto omnis\nmollitia et quo\nassumenda suscipit officia magnam si..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.315" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.315" endtime="20210208 08:41:47.315"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.315" endtime="20210208 08:41:47.316"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.315" endtime="20210208 08:41:47.316"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 86, 'title': 'placeat quia et porro iste', 'body': 'quasi excepturi consequatur iste autem temporibus sed molestiae beatae\net quaerat et esse ut\nvoluptatem occaecati et vel expli..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.316" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.316" endtime="20210208 08:41:47.316"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.316" endtime="20210208 08:41:47.316"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.316" endtime="20210208 08:41:47.316"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 87, 'title': 'nostrum quis quasi placeat', 'body': 'eos et molestiae\nnesciunt ut a\ndolores perspiciatis repellendus repellat aliquid\nmagnam sint rem ipsum est'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.317" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.317" endtime="20210208 08:41:47.317"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.317" endtime="20210208 08:41:47.317"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.316" endtime="20210208 08:41:47.317"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 88, 'title': 'sapiente omnis fugit eos', 'body': 'consequatur omnis est praesentium\nducimus non iste\nneque hic deserunt\nvoluptatibus veniam cum et rerum sed'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.318" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.317" endtime="20210208 08:41:47.318"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.318" endtime="20210208 08:41:47.318"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.317" endtime="20210208 08:41:47.318"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 89, 'title': 'sint soluta et vel magnam aut ut sed qui', 'body': 'repellat aut aperiam totam temporibus autem et\narchitecto magnam ut\nconsequatur qui cupiditate rerum quia soluta..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.318" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.318" endtime="20210208 08:41:47.318"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.318" endtime="20210208 08:41:47.319"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.318" endtime="20210208 08:41:47.319"></status>
</kw>
<kw name="${postobject} = {'userId': 9, 'id': 90, 'title': 'ad iusto omnis odit dolor voluptatibus', 'body': 'minus omnis soluta quia\nqui sed adipisci voluptates illum ipsam voluptatem\neligendi officia ut in\neos soluta simi..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.319" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.319" endtime="20210208 08:41:47.319"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.319" endtime="20210208 08:41:47.319"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.319" endtime="20210208 08:41:47.319"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 91, 'title': 'aut amet sed', 'body': 'libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores qu..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.320" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.320" endtime="20210208 08:41:47.320"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.320" endtime="20210208 08:41:47.320"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.320" endtime="20210208 08:41:47.320"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 92, 'title': 'ratione ex tenetur perferendis', 'body': 'aut et excepturi dicta laudantium sint rerum nihil\nlaudantium et at\na neque minima officia et similique libero et\ncommod..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.321" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.320" endtime="20210208 08:41:47.321"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.321" endtime="20210208 08:41:47.321"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.320" endtime="20210208 08:41:47.321"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 93, 'title': 'beatae soluta recusandae', 'body': 'dolorem quibusdam ducimus consequuntur dicta aut quo laboriosam\nvoluptatem quis enim recusandae ut sed sunt\nnostrum est odit to..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.321" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.321" endtime="20210208 08:41:47.321"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.322" endtime="20210208 08:41:47.322"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.321" endtime="20210208 08:41:47.322"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 94, 'title': 'qui qui voluptates illo iste minima', 'body': 'aspernatur expedita soluta quo ab ut similique\nexpedita dolores amet\nsed temporibus distinctio magnam saepe deleniti..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.322" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.322" endtime="20210208 08:41:47.322"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.322" endtime="20210208 08:41:47.322"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.322" endtime="20210208 08:41:47.323"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 95, 'title': 'id minus libero illum nam ad officiis', 'body': 'earum voluptatem facere provident blanditiis velit laboriosam\npariatur accusamus odio saepe\ncumque dolor qui a dic..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.323" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.323" endtime="20210208 08:41:47.323"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.323" endtime="20210208 08:41:47.324"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.323" endtime="20210208 08:41:47.324"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 96, 'title': 'quaerat velit veniam amet cupiditate aut numquam ut sequi', 'body': 'in non odio excepturi sint eum\nlabore voluptates vitae quia qui et\ninventore itaque rerum\nven..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.325" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.324" endtime="20210208 08:41:47.325"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.325" endtime="20210208 08:41:47.325"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.324" endtime="20210208 08:41:47.325"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 97, 'title': 'quas fugiat ut perspiciatis vero provident', 'body': 'eum non blanditiis soluta porro quibusdam voluptas\nvel voluptatem qui placeat dolores qui velit aut\nvel inven..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.326" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.326" endtime="20210208 08:41:47.326"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.326" endtime="20210208 08:41:47.326"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.325" endtime="20210208 08:41:47.326"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 98, 'title': 'laboriosam dolor voluptates', 'body': 'doloremque ex facilis sit sint culpa\nsoluta assumenda eligendi non ut eius\nsequi ducimus vel quasi\nveritatis est dolores'}" type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.327" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.326" endtime="20210208 08:41:47.327"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.327" endtime="20210208 08:41:47.327"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.326" endtime="20210208 08:41:47.327"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 99, 'title': 'temporibus sit alias delectus eligendi possimus magni', 'body': 'quo deleniti praesentium dicta non quod\naut est molestias\nmolestias et officia quis nihil\nitaque ..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.328" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.327" endtime="20210208 08:41:47.328"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.328" endtime="20210208 08:41:47.328"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.327" endtime="20210208 08:41:47.328"></status>
</kw>
<kw name="${postobject} = {'userId': 10, 'id': 100, 'title': 'at nam consequatur ea labore ea harum', 'body': 'cupiditate quo est a modi nesciunt soluta\nipsa voluptas error itaque dicta in\nautem qui minus magnam et distincti..." type="foritem">
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${postobject}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedPostKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.328" level="INFO">${unsortedPostKey} = ['userId', 'id', 'title', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.328" endtime="20210208 08:41:47.329"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedPostKey}</arg>
<arg>${postKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.329" endtime="20210208 08:41:47.329"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.328" endtime="20210208 08:41:47.329"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.244" endtime="20210208 08:41:47.329"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>100</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210208 08:41:47.330" level="INFO">Length is 100</msg>
<msg timestamp="20210208 08:41:47.330" level="INFO">${jsonLength} = 100</msg>
<status status="PASS" starttime="20210208 08:41:47.330" endtime="20210208 08:41:47.330"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.330" endtime="20210208 08:41:47.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.330" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.330" endtime="20210208 08:41:47.330"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.329" endtime="20210208 08:41:47.331"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.181" endtime="20210208 08:41:47.331"></status>
</kw>
<doc>Validates success response along with all fields and record count 100</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.180" endtime="20210208 08:41:47.331" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Fetch post details based on post ID and validate ID in response">
<kw name="Get API response for post with different post ID" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{validPostId} ]" type="for">
<kw name="${postId} = 1" type="foritem">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.360" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1 
 path_url=/posts/1 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.361" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612482284', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"124-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '21406', 'cf-request-id': '0823798ee70000e7481a215000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=zT5RPnFksP0Uzqe%2FhoeqXb1M0vWKhJPeiCQdw6MhiKMjEYPyup8J8DC7DRA%2B8RFNAF2FBHEFAN3V9MfgRS8BVvtn%2FIMMW%2BmLbKZEXEw2Cgieq6tkMWKEIfEo8Rah"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52b09c3e748-EWR', 'Content-Encoding': 'gzip'} 
 body={
  "userId": 1,
  "id": 1,
  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
} 
 </msg>
<msg timestamp="20210208 08:41:47.361" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.333" endtime="20210208 08:41:47.361"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.333" endtime="20210208 08:41:47.362"></status>
</kw>
<msg timestamp="20210208 08:41:47.362" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.332" endtime="20210208 08:41:47.362"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.363" endtime="20210208 08:41:47.364"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.365" level="INFO">${jsonObject} = {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit...</msg>
<status status="PASS" starttime="20210208 08:41:47.365" endtime="20210208 08:41:47.366"></status>
</kw>
<msg timestamp="20210208 08:41:47.366" level="INFO">${jsonResponse} = {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit...</msg>
<status status="PASS" starttime="20210208 08:41:47.362" endtime="20210208 08:41:47.366"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..id</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210208 08:41:47.401" level="INFO">${post_id} = [1]</msg>
<status status="PASS" starttime="20210208 08:41:47.366" endtime="20210208 08:41:47.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.401" endtime="20210208 08:41:47.402"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.332" endtime="20210208 08:41:47.402"></status>
</kw>
<kw name="${postId} = 4" type="foritem">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.431" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/4 
 path_url=/posts/4 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.431" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/4 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1610298431', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"10e-HqG77o1RAmatkSwR36f4+Io6g1E"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '0823798f2c0000e748408f8000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=%2FQXI%2FVuNTH07nDhWTaL%2FU2Zj9YFZ25HEH0dob3Illi8WT4qbHHCkyYIcqixphtTReoUvNQehtwRNONV92T3P7rf9vf16EhzIrZCXxv9x8JgWXI1yzvP8AUgNG0rc"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52b7a6ce748-EWR', 'Content-Encoding': 'gzip'} 
 body={
  "userId": 1,
  "id": 4,
  "title": "eum et est occaecati",
  "body": "ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\nquis sunt voluptatem rerum illo velit"
} 
 </msg>
<msg timestamp="20210208 08:41:47.432" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.403" endtime="20210208 08:41:47.432"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.402" endtime="20210208 08:41:47.432"></status>
</kw>
<msg timestamp="20210208 08:41:47.432" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.402" endtime="20210208 08:41:47.433"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.434" endtime="20210208 08:41:47.435"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.435" level="INFO">${jsonObject} = {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur do...</msg>
<status status="PASS" starttime="20210208 08:41:47.435" endtime="20210208 08:41:47.436"></status>
</kw>
<msg timestamp="20210208 08:41:47.436" level="INFO">${jsonResponse} = {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur do...</msg>
<status status="PASS" starttime="20210208 08:41:47.433" endtime="20210208 08:41:47.436"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..id</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210208 08:41:47.466" level="INFO">${post_id} = [4]</msg>
<status status="PASS" starttime="20210208 08:41:47.436" endtime="20210208 08:41:47.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.466" endtime="20210208 08:41:47.467"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.402" endtime="20210208 08:41:47.467"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.332" endtime="20210208 08:41:47.467"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.332" endtime="20210208 08:41:47.467"></status>
</kw>
<doc>Validates success retuned along with postid in response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.331" endtime="20210208 08:41:47.467" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="To verify posts response in case of invalid post ID">
<kw name="Get API response for post with invalid post ID" library="GetPostApi">
<arguments>
<arg>${INVALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{invalidPostId} ]" type="for">
<kw name="${postId} = 101" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.498" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/101 
 path_url=/posts/101 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.498" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/101 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '0823798f6f0000e7486b0e2000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=pL6xGDH4lqMTNcnZEpswbcNtn8mPH1gJJkd9lMmAAhC35mksjDa5foM5P6MHyJilzcFVAKLO1vQLHANUSmw97%2F4pR5v4OpoQFGZxw%2F9Jsg7DkklFPUmZe4Y5rVyj"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52beb34e748-EWR'} 
 body={} 
 </msg>
<msg timestamp="20210208 08:41:47.500" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="FAIL" starttime="20210208 08:41:47.469" endtime="20210208 08:41:47.500"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210208 08:41:47.469" endtime="20210208 08:41:47.501"></status>
</kw>
<msg timestamp="20210208 08:41:47.501" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="PASS" starttime="20210208 08:41:47.468" endtime="20210208 08:41:47.501"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.501" endtime="20210208 08:41:47.502"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.468" endtime="20210208 08:41:47.502"></status>
</kw>
<kw name="${postId} = -102" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.551" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/-102 
 path_url=/posts/-102 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.551" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/-102 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '997', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '0823798f940000e7486fbf0000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=mcFVJhbqJG5ssWq0xcq%2FURraqLMSOELtb5452YRr8OBkWSwrr2lteI7miPrufDZ8ax0RIFJeXv0kLjNksCwdWe3bN%2B%2FcNSL72sRDmPvIE1iVz%2F06EKMpIbtuA7IB"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52c2b94e748-EWR'} 
 body={} 
 </msg>
<msg timestamp="20210208 08:41:47.552" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="FAIL" starttime="20210208 08:41:47.505" endtime="20210208 08:41:47.552"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210208 08:41:47.503" endtime="20210208 08:41:47.553"></status>
</kw>
<msg timestamp="20210208 08:41:47.553" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="PASS" starttime="20210208 08:41:47.502" endtime="20210208 08:41:47.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.553" endtime="20210208 08:41:47.555"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.502" endtime="20210208 08:41:47.555"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.468" endtime="20210208 08:41:47.555"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.468" endtime="20210208 08:41:47.555"></status>
</kw>
<doc>Validates 404 Not Found Response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.467" endtime="20210208 08:41:47.556" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Verify posts for specific user and validate number of records">
<kw name="GET API response for post to check all posts of specific user" library="GetPostApi">
<arguments>
<arg>${VALID_USERID}</arg>
</arguments>
<kw name="${userId} IN [ @{validUserId} ]" type="for">
<kw name="${userId} = 1" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:47.559" level="INFO">${param} = {'userId': '1'}</msg>
<status status="PASS" starttime="20210208 08:41:47.558" endtime="20210208 08:41:47.559"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.588" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId=1 
 path_url=/posts/?userId=1 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.588" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId=1 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '996', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"aa6-j2NSH739l9uq40OywFMn7Y0C/iY"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '0823798fca0000e7482e07e000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=il8JG6lucD6NLftINRmi%2Fg0qNfiGpbJ34K7TC1uuvCFSAh%2FIQhXyTC2xZ8EbGJTH1VrTXjaefKWBM%2B%2FYxd9WSeghHWDRGN37jUcvhCXrtc7SCiVF6Gd32ud57Kgx"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52c7c00e748-EWR'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  },
  {
    "userId": 1,
    "id": 2,
    "title": "qui est esse",
    "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
  },
  {
    "userId": 1,
    "id": 3,
    "title": "ea molestias quasi exercitationem repellat qui ipsa sit aut",
    "body": "et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accusantium quis pariatur\nmolestiae porro eius odio et labore et velit aut"
  },
  {
    "userId": 1,
    "id": 4,
    "title": "eum et est occaecati",
    "body": "ullam et saepe reiciendis voluptatem adipisci\nsit amet autem assumenda provident rerum culpa\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\nquis sunt voluptatem rerum illo velit"
  },
  {
    "userId": 1,
    "id": 5,
    "title": "nesciunt quas odio",
    "body": "repudiandae veniam quaerat sunt sed\nalias aut fugiat sit autem sed est\nvoluptatem omnis possimus esse voluptatibus quis\nest aut tenetur dolor neque"
  },
  {
    "userId": 1,
    "id": 6,
    "title": "dolorem eum magni eos aperiam quia",
    "body": "ut aspernatur corporis harum nihil quis provident sequi\nmollitia nobis aliquid molestiae\nperspiciatis et ea nemo ab reprehenderit accusantium quas\nvoluptate dolores velit et doloremque molestiae"
  },
  {
    "userId": 1,
    "id": 7,
    "title": "magnam facilis autem",
    "body": "dolore placeat quibusdam ea quo vitae\nmagni quis enim qui quis quo nemo aut saepe\nquidem repellat excepturi ut quia\nsunt ut sequi eos ea sed quas"
  },
  {
    "userId": 1,
    "id": 8,
    "title": "dolorem dolore est ipsam",
    "body": "dignissimos aperiam dolorem qui eum\nfacilis quibusdam animi sint suscipit qui sint possimus cum\nquaerat magni maiores excepturi\nipsam ut commodi dolor voluptatum modi aut vitae"
  },
  {
    "userId": 1,
    "id": 9,
    "title": "nesciunt iure omnis dolorem tempora et accusantium",
    "body": "consectetur animi nesciunt iure dolore\nenim quia ad\nveniam autem ut quam aut nobis\net est aut quod aut provident voluptas autem voluptas"
  },
  {
    "userId": 1,
    "id": 10,
    "title": "optio molestias id quia eum",
    "body": "quo et expedita modi cum officia vel magni\ndoloribus qui repudiandae\nvero nisi sit\nquos veniam quod sed accusamus veritatis error"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:47.589" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.561" endtime="20210208 08:41:47.589"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.560" endtime="20210208 08:41:47.589"></status>
</kw>
<msg timestamp="20210208 08:41:47.590" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.560" endtime="20210208 08:41:47.590"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.591" endtime="20210208 08:41:47.593"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.594" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:47.593" endtime="20210208 08:41:47.595"></status>
</kw>
<msg timestamp="20210208 08:41:47.595" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:47.590" endtime="20210208 08:41:47.595"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..userId</arg>
</arguments>
<assign>
<var>${user_Id}</var>
</assign>
<msg timestamp="20210208 08:41:47.635" level="INFO">${user_Id} = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</msg>
<status status="PASS" starttime="20210208 08:41:47.596" endtime="20210208 08:41:47.635"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>10</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210208 08:41:47.636" level="INFO">Length is 10</msg>
<msg timestamp="20210208 08:41:47.636" level="INFO">${jsonLength} = 10</msg>
<status status="PASS" starttime="20210208 08:41:47.636" endtime="20210208 08:41:47.636"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.636" endtime="20210208 08:41:47.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.637" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.637" endtime="20210208 08:41:47.637"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.635" endtime="20210208 08:41:47.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${user_Id}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.637" endtime="20210208 08:41:47.637"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.558" endtime="20210208 08:41:47.637"></status>
</kw>
<kw name="${userId} = 10" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:47.638" level="INFO">${param} = {'userId': '10'}</msg>
<status status="PASS" starttime="20210208 08:41:47.637" endtime="20210208 08:41:47.638"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.667" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId=10 
 path_url=/posts/?userId=10 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.667" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId=10 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '995', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"a68-bp+xhXz2hSYZZUvrpfEFLIhQbe4"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '08237990170000e74829385000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=aMQQu2nCP44A6Wln5M4aq8yPJJ4BSeBWsNGw4ck%2Fogd9koUgxE%2FnQbXYJturq7uA7BSnRYGOdzV3AJmh1DAIT5FadRrV4iC6uJk%2B3StRq1ePIolrwj56nTh6ZdYh"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52cecb1e748-EWR'} 
 body=[
  {
    "userId": 10,
    "id": 91,
    "title": "aut amet sed",
    "body": "libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores quia eos et placeat"
  },
  {
    "userId": 10,
    "id": 92,
    "title": "ratione ex tenetur perferendis",
    "body": "aut et excepturi dicta laudantium sint rerum nihil\nlaudantium et at\na neque minima officia et similique libero et\ncommodi voluptate qui"
  },
  {
    "userId": 10,
    "id": 93,
    "title": "beatae soluta recusandae",
    "body": "dolorem quibusdam ducimus consequuntur dicta aut quo laboriosam\nvoluptatem quis enim recusandae ut sed sunt\nnostrum est odit totam\nsit error sed sunt eveniet provident qui nulla"
  },
  {
    "userId": 10,
    "id": 94,
    "title": "qui qui voluptates illo iste minima",
    "body": "aspernatur expedita soluta quo ab ut similique\nexpedita dolores amet\nsed temporibus distinctio magnam saepe deleniti\nomnis facilis nam ipsum natus sint similique omnis"
  },
  {
    "userId": 10,
    "id": 95,
    "title": "id minus libero illum nam ad officiis",
    "body": "earum voluptatem facere provident blanditiis velit laboriosam\npariatur accusamus odio saepe\ncumque dolor qui a dicta ab doloribus consequatur omnis\ncorporis cupiditate eaque assumenda ad nesciunt"
  },
  {
    "userId": 10,
    "id": 96,
    "title": "quaerat velit veniam amet cupiditate aut numquam ut sequi",
    "body": "in non odio excepturi sint eum\nlabore voluptates vitae quia qui et\ninventore itaque rerum\nveniam non exercitationem delectus aut"
  },
  {
    "userId": 10,
    "id": 97,
    "title": "quas fugiat ut perspiciatis vero provident",
    "body": "eum non blanditiis soluta porro quibusdam voluptas\nvel voluptatem qui placeat dolores qui velit aut\nvel inventore aut cumque culpa explicabo aliquid at\nperspiciatis est et voluptatem dignissimos dolor itaque sit nam"
  },
  {
    "userId": 10,
    "id": 98,
    "title": "laboriosam dolor voluptates",
    "body": "doloremque ex facilis sit sint culpa\nsoluta assumenda eligendi non ut eius\nsequi ducimus vel quasi\nveritatis est dolores"
  },
  {
    "userId": 10,
    "id": 99,
    "title": "temporibus sit alias delectus eligendi possimus magni",
    "body": "quo deleniti praesentium dicta non quod\naut est molestias\nmolestias et officia quis nihil\nitaque dolorem quia"
  },
  {
    "userId": 10,
    "id": 100,
    "title": "at nam consequatur ea labore ea harum",
    "body": "cupiditate quo est a modi nesciunt soluta\nipsa voluptas error itaque dicta in\nautem qui minus magnam et distinctio eum\naccusamus ratione error aut"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:47.668" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.639" endtime="20210208 08:41:47.668"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.638" endtime="20210208 08:41:47.668"></status>
</kw>
<msg timestamp="20210208 08:41:47.669" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.638" endtime="20210208 08:41:47.669"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.670" endtime="20210208 08:41:47.671"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.672" level="INFO">${jsonObject} = [{'userId': 10, 'id': 91, 'title': 'aut amet sed', 'body': 'libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores q...</msg>
<status status="PASS" starttime="20210208 08:41:47.671" endtime="20210208 08:41:47.672"></status>
</kw>
<msg timestamp="20210208 08:41:47.673" level="INFO">${jsonResponse} = [{'userId': 10, 'id': 91, 'title': 'aut amet sed', 'body': 'libero voluptate eveniet aperiam sed\nsunt placeat suscipit molestias\nsimilique fugit nam natus\nexpedita consequatur consequatur dolores q...</msg>
<status status="PASS" starttime="20210208 08:41:47.669" endtime="20210208 08:41:47.673"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..userId</arg>
</arguments>
<assign>
<var>${user_Id}</var>
</assign>
<msg timestamp="20210208 08:41:47.704" level="INFO">${user_Id} = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]</msg>
<status status="PASS" starttime="20210208 08:41:47.673" endtime="20210208 08:41:47.704"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>10</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210208 08:41:47.705" level="INFO">Length is 10</msg>
<msg timestamp="20210208 08:41:47.705" level="INFO">${jsonLength} = 10</msg>
<status status="PASS" starttime="20210208 08:41:47.705" endtime="20210208 08:41:47.705"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.705" endtime="20210208 08:41:47.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.705" endtime="20210208 08:41:47.706"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.704" endtime="20210208 08:41:47.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${user_Id}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.706" endtime="20210208 08:41:47.706"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.637" endtime="20210208 08:41:47.706"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.558" endtime="20210208 08:41:47.706"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.557" endtime="20210208 08:41:47.706"></status>
</kw>
<doc>Validates success response along with userid and number of records as 10</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.556" endtime="20210208 08:41:47.706" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Verify posts response for incorrect user">
<kw name="GET API response for post of incorrect user" library="GetPostApi">
<arguments>
<arg>${INCORRECT_USERID}</arg>
</arguments>
<kw name="${userId} IN [ @{incorrectUserId} ]" type="for">
<kw name="${userId} = 11" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:47.708" level="INFO">${param} = {'userId': '11'}</msg>
<status status="PASS" starttime="20210208 08:41:47.708" endtime="20210208 08:41:47.708"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>@{param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.736" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId 
 path_url=/posts/?userId 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.736" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '994', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'Accept-Ranges': 'bytes', 'cf-request-id': '082379905b0000e7484db19000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=eE50KwlsT7Dc3P7B%2BdIHiSZatYUiRNBud3lLaT%2B84Dca1EAVOahmXZzrP3VD3K1FUkDzSD51xh30x9V9p81tnFxWTLiCbow34ETj41AH9DRgKGSI2RKRpxFvCiPh"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52d5d58e748-EWR'} 
 body=[] 
 </msg>
<msg timestamp="20210208 08:41:47.737" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.709" endtime="20210208 08:41:47.737"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.709" endtime="20210208 08:41:47.737"></status>
</kw>
<msg timestamp="20210208 08:41:47.737" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.708" endtime="20210208 08:41:47.738"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.739" endtime="20210208 08:41:47.740"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.741" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210208 08:41:47.740" endtime="20210208 08:41:47.741"></status>
</kw>
<msg timestamp="20210208 08:41:47.741" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210208 08:41:47.738" endtime="20210208 08:41:47.742"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.743" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210208 08:41:47.742" endtime="20210208 08:41:47.743"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.708" endtime="20210208 08:41:47.743"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.707" endtime="20210208 08:41:47.743"></status>
</kw>
<kw name="${userId} = 12" type="foritem">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>userId=${userId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:47.745" level="INFO">${param} = {'userId': '12'}</msg>
<status status="PASS" starttime="20210208 08:41:47.744" endtime="20210208 08:41:47.745"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>@{param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.774" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?userId 
 path_url=/posts/?userId 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.774" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?userId 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '994', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'Accept-Ranges': 'bytes', 'cf-request-id': '08237990850000e748342da000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=v1LIQi4qtI60eGgMXXCHTQpLOfQZaVIfBQWcwdA0KCzSm2p8DIOi07Y%2FZNE8FfxRy7lBIaYbfRuSeu6U%2F6wERiro1oPcxBJhwY7p8lzMADtyWTiduScF%2BLd%2B4Zuz"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52dadcde748-EWR'} 
 body=[] 
 </msg>
<msg timestamp="20210208 08:41:47.774" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.748" endtime="20210208 08:41:47.775"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.746" endtime="20210208 08:41:47.775"></status>
</kw>
<msg timestamp="20210208 08:41:47.775" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.746" endtime="20210208 08:41:47.775"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.776" endtime="20210208 08:41:47.777"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.778" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210208 08:41:47.777" endtime="20210208 08:41:47.778"></status>
</kw>
<msg timestamp="20210208 08:41:47.778" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210208 08:41:47.775" endtime="20210208 08:41:47.778"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.779" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210208 08:41:47.779" endtime="20210208 08:41:47.779"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.745" endtime="20210208 08:41:47.779"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.744" endtime="20210208 08:41:47.779"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.707" endtime="20210208 08:41:47.779"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.707" endtime="20210208 08:41:47.780"></status>
</kw>
<doc>Validates success response with empty response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.707" endtime="20210208 08:41:47.780" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Verify all post comments are getting displayed for provided post ID">
<kw name="Get API response for post to check all comments" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{validPostId} ]" type="for">
<kw name="${postId} = 1" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.782" endtime="20210208 08:41:47.783"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.811" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1/comments 
 path_url=/posts/1/comments 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.811" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1/comments 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612777377', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"5e6-4bSPS5tq8F8ZDeFJULWh6upjp7U"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '14383', 'cf-request-id': '08237990a70000e7481d1ce000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=nTUnNqtrFp89tbtKlPQJ%2FQUcd4xLoFXDEdGX6fqicFRg9j%2FxymKgIDmnjD8Ub0gKRA%2BzbIiw3nWbFatpDef9NkNSA1rNLGJ9v%2FKLPtQ0xRc2i5HEw6A1B3NoKwpG"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52dde1be748-EWR'} 
 body=[
  {
    "postId": 1,
    "id": 1,
    "name": "id labore ex et quam laborum",
    "email": "Eliseo@gardner.biz",
    "body": "laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"
  },
  {
    "postId": 1,
    "id": 2,
    "name": "quo vero reiciendis velit similique earum",
    "email": "Jayne_Kuhic@sydney.com",
    "body": "est natus enim nihil est dolore omnis voluptatem numquam\net omnis occaecati quod ullam at\nvoluptatem error expedita pariatur\nnihil sint nostrum voluptatem reiciendis et"
  },
  {
    "postId": 1,
    "id": 3,
    "name": "odio adipisci rerum aut animi",
    "email": "Nikita@garfield.biz",
    "body": "quia molestiae reprehenderit quasi aspernatur\naut expedita occaecati aliquam eveniet laudantium\nomnis quibusdam delectus saepe quia accusamus maiores nam est\ncum et ducimus et vero voluptates excepturi deleniti ratione"
  },
  {
    "postId": 1,
    "id": 4,
    "name": "alias odio sit",
    "email": "Lew@alysha.tv",
    "body": "non et atque\noccaecati deserunt quas accusantium unde odit nobis qui voluptatem\nquia voluptas consequuntur itaque dolor\net qui rerum deleniti ut occaecati"
  },
  {
    "postId": 1,
    "id": 5,
    "name": "vero eaque aliquid doloribus et culpa",
    "email": "Hayden@althea.biz",
    "body": "harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugit inventore cupiditate\nvoluptates magni quo et"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:47.811" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.784" endtime="20210208 08:41:47.812"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.783" endtime="20210208 08:41:47.812"></status>
</kw>
<msg timestamp="20210208 08:41:47.812" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.783" endtime="20210208 08:41:47.812"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.814" endtime="20210208 08:41:47.815"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.817" level="INFO">${jsonObject} = [{'postId': 1, 'id': 1, 'name': 'id labore ex et quam laborum', 'email': 'Eliseo@gardner.biz', 'body': 'laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor q...</msg>
<status status="PASS" starttime="20210208 08:41:47.815" endtime="20210208 08:41:47.817"></status>
</kw>
<msg timestamp="20210208 08:41:47.817" level="INFO">${jsonResponse} = [{'postId': 1, 'id': 1, 'name': 'id labore ex et quam laborum', 'email': 'Eliseo@gardner.biz', 'body': 'laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor q...</msg>
<status status="PASS" starttime="20210208 08:41:47.813" endtime="20210208 08:41:47.817"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>5</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210208 08:41:47.819" level="INFO">Length is 5</msg>
<msg timestamp="20210208 08:41:47.819" level="INFO">${jsonLength} = 5</msg>
<status status="PASS" starttime="20210208 08:41:47.819" endtime="20210208 08:41:47.819"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.819" endtime="20210208 08:41:47.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.820" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.820" endtime="20210208 08:41:47.821"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.818" endtime="20210208 08:41:47.821"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedCommentKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.822" level="INFO">${unsortedCommentKey} = ['postId', 'id', 'name', 'email', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.821" endtime="20210208 08:41:47.822"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedCommentKey}</arg>
<arg>${commentsKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.822" endtime="20210208 08:41:47.823"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>$..postId</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210208 08:41:47.850" level="INFO">${post_id} = [1]</msg>
<status status="PASS" starttime="20210208 08:41:47.823" endtime="20210208 08:41:47.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.850" endtime="20210208 08:41:47.851"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.782" endtime="20210208 08:41:47.851"></status>
</kw>
<kw name="${postId} = 4" type="foritem">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.851" endtime="20210208 08:41:47.851"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId}${COMMENTS_RESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.891" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/4/comments 
 path_url=/posts/4/comments 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.891" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/4/comments 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1612746730', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"644-PjWFVfLL86ukVeckYRQFyH3L7DU"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '126', 'cf-request-id': '08237990ee0000e7486820c000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=Pf8waHOYL2346ZmreVE2mrpZA1ZFjBYkAcpRGTu9bstOu%2FsQOIQCb5DPmzzzDuq7DnkPvewv4T3B4EJX0mTHgQ4IFmYdeU8%2BTTXOCh9nlFm1s98EmN90PJt24Rqo"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52e4ebae748-EWR'} 
 body=[
  {
    "postId": 4,
    "id": 16,
    "name": "perferendis temporibus delectus optio ea eum ratione dolorum",
    "email": "Christine@ayana.info",
    "body": "iste ut laborum aliquid velit facere itaque\nquo ut soluta dicta voluptate\nerror tempore aut et\nsequi reiciendis dignissimos expedita consequuntur libero sed fugiat facilis"
  },
  {
    "postId": 4,
    "id": 17,
    "name": "eos est animi quis",
    "email": "Preston_Hudson@blaise.tv",
    "body": "consequatur necessitatibus totam sed sit dolorum\nrecusandae quae odio excepturi voluptatum harum voluptas\nquisquam sit ad eveniet delectus\ndoloribus odio qui non labore"
  },
  {
    "postId": 4,
    "id": 18,
    "name": "aut et tenetur ducimus illum aut nulla ab",
    "email": "Vincenza_Klocko@albertha.name",
    "body": "veritatis voluptates necessitatibus maiores corrupti\nneque et exercitationem amet sit et\nullam velit sit magnam laborum\nmagni ut molestias"
  },
  {
    "postId": 4,
    "id": 19,
    "name": "sed impedit rerum quia et et inventore unde officiis",
    "email": "Madelynn.Gorczany@darion.biz",
    "body": "doloribus est illo sed minima aperiam\nut dignissimos accusantium tempore atque et aut molestiae\nmagni ut accusamus voluptatem quos ut voluptates\nquisquam porro sed architecto ut"
  },
  {
    "postId": 4,
    "id": 20,
    "name": "molestias expedita iste aliquid voluptates",
    "email": "Mariana_Orn@preston.org",
    "body": "qui harum consequatur fugiat\net eligendi perferendis at molestiae commodi ducimus\ndoloremque asperiores numquam qui\nut sit dignissimos reprehenderit tempore"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:47.892" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.852" endtime="20210208 08:41:47.892"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:47.852" endtime="20210208 08:41:47.892"></status>
</kw>
<msg timestamp="20210208 08:41:47.892" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.851" endtime="20210208 08:41:47.892"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.894" endtime="20210208 08:41:47.895"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:47.895" level="INFO">${jsonObject} = [{'postId': 4, 'id': 16, 'name': 'perferendis temporibus delectus optio ea eum ratione dolorum', 'email': 'Christine@ayana.info', 'body': 'iste ut laborum aliquid velit facere itaque\nquo ut soluta di...</msg>
<status status="PASS" starttime="20210208 08:41:47.895" endtime="20210208 08:41:47.895"></status>
</kw>
<msg timestamp="20210208 08:41:47.896" level="INFO">${jsonResponse} = [{'postId': 4, 'id': 16, 'name': 'perferendis temporibus delectus optio ea eum ratione dolorum', 'email': 'Christine@ayana.info', 'body': 'iste ut laborum aliquid velit facere itaque\nquo ut soluta di...</msg>
<status status="PASS" starttime="20210208 08:41:47.893" endtime="20210208 08:41:47.896"></status>
</kw>
<kw name="Verify Record Count" library="GetPostApi">
<arguments>
<arg>${jsonResponse}</arg>
<arg>5</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${attribute}</arg>
</arguments>
<assign>
<var>${jsonLength}</var>
</assign>
<msg timestamp="20210208 08:41:47.897" level="INFO">Length is 5</msg>
<msg timestamp="20210208 08:41:47.897" level="INFO">${jsonLength} = 5</msg>
<status status="PASS" starttime="20210208 08:41:47.897" endtime="20210208 08:41:47.898"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${jsonlength}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.898" endtime="20210208 08:41:47.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${jsonLength}</arg>
<arg>${expected}</arg>
</arguments>
<msg timestamp="20210208 08:41:47.899" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210208 08:41:47.898" endtime="20210208 08:41:47.899"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.896" endtime="20210208 08:41:47.899"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>sort_keys=False</arg>
</arguments>
<assign>
<var>${unsortedCommentKey}</var>
</assign>
<msg timestamp="20210208 08:41:47.900" level="INFO">${unsortedCommentKey} = ['postId', 'id', 'name', 'email', 'body']</msg>
<status status="PASS" starttime="20210208 08:41:47.899" endtime="20210208 08:41:47.900"></status>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<doc>Fails if given lists are unequal.</doc>
<arguments>
<arg>${unsortedCommentKey}</arg>
<arg>${commentsKeyList}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.900" endtime="20210208 08:41:47.901"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse[0]}</arg>
<arg>$..postId</arg>
</arguments>
<assign>
<var>${post_id}</var>
</assign>
<msg timestamp="20210208 08:41:47.929" level="INFO">${post_id} = [4]</msg>
<status status="PASS" starttime="20210208 08:41:47.901" endtime="20210208 08:41:47.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${post_id}</arg>
<arg>${postId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.929" endtime="20210208 08:41:47.929"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.851" endtime="20210208 08:41:47.929"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.782" endtime="20210208 08:41:47.929"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.781" endtime="20210208 08:41:47.929"></status>
</kw>
<doc>Takes multiple input and checks comments for each post id</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.781" endtime="20210208 08:41:47.930" critical="yes"></status>
</test>
<test id="s1-s1-t7" name="Verify response for post comments with invalid post ID">
<kw name="Get API response for post with invalid post ID" library="GetPostApi">
<arguments>
<arg>${INVALID_POSTID}</arg>
</arguments>
<kw name="${postId} IN [ @{invalidPostId} ]" type="for">
<kw name="${postId} = 101" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.959" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/101 
 path_url=/posts/101 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.959" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/101 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '998', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '082379913e0000e74881af7000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=%2Fp%2BIDrQ0%2B05BHnR4L%2FZSjvrc3p3OMgtjxnQrEylmU9RNqF4CsFhPwfJfjq2ZXtjPOS8vu6XskrPaKRVNndlrPbIDQit%2FvMegAK4cpiR7jzEzJ1BYoCCDHE67%2B5oa"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52ecfa5e748-EWR'} 
 body={} 
 </msg>
<msg timestamp="20210208 08:41:47.960" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="FAIL" starttime="20210208 08:41:47.932" endtime="20210208 08:41:47.960"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210208 08:41:47.931" endtime="20210208 08:41:47.961"></status>
</kw>
<msg timestamp="20210208 08:41:47.961" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/101</msg>
<status status="PASS" starttime="20210208 08:41:47.931" endtime="20210208 08:41:47.961"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:47.961" endtime="20210208 08:41:47.962"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.931" endtime="20210208 08:41:47.962"></status>
</kw>
<kw name="${postId} = -102" type="foritem">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postid}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:47.999" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/-102 
 path_url=/posts/-102 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:47.999" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/-102 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '997', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '128', 'cf-request-id': '082379915f0000e7483ab53000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=ZXl0u%2FveU2rh7q2qusUWs9Wme3QaXsQqTkX9bEnTN%2BrOaiNMxWatJHQG7ZiwvHK84RLpVd%2Bsmohf61cUL8DzYZU0ysSLPNJ%2FKcIlYqhcBtARAh9K4eCdKDI%2BbS65"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52ef82be748-EWR'} 
 body={} 
 </msg>
<msg timestamp="20210208 08:41:48.000" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="FAIL" starttime="20210208 08:41:47.964" endtime="20210208 08:41:48.000"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210208 08:41:47.963" endtime="20210208 08:41:48.001"></status>
</kw>
<msg timestamp="20210208 08:41:48.001" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts/-102</msg>
<status status="PASS" starttime="20210208 08:41:47.963" endtime="20210208 08:41:48.001"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.001" endtime="20210208 08:41:48.002"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.962" endtime="20210208 08:41:48.002"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.931" endtime="20210208 08:41:48.002"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:47.930" endtime="20210208 08:41:48.002"></status>
</kw>
<doc>Takes multiple invalid input and validates empty response</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:47.930" endtime="20210208 08:41:48.003" critical="yes"></status>
</test>
<test id="s1-s1-t8" name="To check API response for post in case of incorrect post route resource">
<kw name="Check API response in case of incorrect post resource" library="GetPostApi">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>GET API request</arg>
<arg>${POST_RESOURCE}${INCORRECTRESOURCE}</arg>
</arguments>
<assign>
<var>${err_msg}</var>
</assign>
<kw name="GET API request" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${INCORRECTRESOURCE}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.043" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts//comment 
 path_url=/posts//comment 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.043" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts//comment 
 status=404, reason=Not Found 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'x-powered-by': 'Express', 'x-ratelimit-limit': '1000', 'x-ratelimit-remaining': '992', 'x-ratelimit-reset': '1612791599', 'vary': 'Origin, Accept-Encoding', 'access-control-allow-credentials': 'true', 'cache-control': 'max-age=43200', 'pragma': 'no-cache', 'expires': '-1', 'x-content-type-options': 'nosniff', 'etag': 'W/"2-vyGp6PvFo4RvsFtPoIWeCReyIC8"', 'via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '082379918b0000e7485318b000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=hgHQgaCZ7uBbYH3yDlI%2FikDgL3%2BDMGCKpP%2B2pHVt2WXU0unofEsRG1Ns%2BfDSPWc%2FBkf9wvcuUHC0r9YJrWXQhr%2BCaH779Zb2zI0aapPHzdW0f20QnuwSj%2BwyAouD"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52f48ffe748-EWR'} 
 body={} 
 </msg>
<msg timestamp="20210208 08:41:48.044" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts//comment</msg>
<status status="FAIL" starttime="20210208 08:41:48.007" endtime="20210208 08:41:48.044"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="FAIL" starttime="20210208 08:41:48.007" endtime="20210208 08:41:48.044"></status>
</kw>
<msg timestamp="20210208 08:41:48.045" level="INFO">${err_msg} = HTTPError: 404 Client Error: Not Found for url: http://jsonplaceholder.typicode.com/posts//comment</msg>
<status status="PASS" starttime="20210208 08:41:48.005" endtime="20210208 08:41:48.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${err_msg}</arg>
<arg>${GET_FAILURE_NOT_FOUND}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.045" endtime="20210208 08:41:48.045"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.004" endtime="20210208 08:41:48.046"></status>
</kw>
<doc>Varifies 404 Not found response for incorrect post resource</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.003" endtime="20210208 08:41:48.046" critical="yes"></status>
</test>
<test id="s1-s1-t9" name="Check post for specific title with query parameter">
<kw name="GET post API response for specific title with query parameter" library="GetPostApi">
<arguments>
<arg>${POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>title=${titleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:48.049" level="INFO">${param} = {'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit'}</msg>
<status status="PASS" starttime="20210208 08:41:48.048" endtime="20210208 08:41:48.049"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.078" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 path_url=/posts/?title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.078" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '991', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"134-QtF0EaiifRh1Z3cEspXIXV0RoQY"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '08237991b50000e7485318f000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=p3Tlfv%2FlW6Q6MN8i7XP%2FroK0rb%2FUezKxhWyHnOFjkw%2BMS4F448QH7X3di52v7o7IpeXNhAXGZV1PCiv2NVKFN%2Fb7BVZY7TJeqtuQok956KPcADw6dEXDtP%2Bz91Bb"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52f899ae748-EWR', 'Content-Encoding': 'gzip'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:48.079" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.050" endtime="20210208 08:41:48.079"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:48.050" endtime="20210208 08:41:48.079"></status>
</kw>
<msg timestamp="20210208 08:41:48.079" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.049" endtime="20210208 08:41:48.079"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.081" endtime="20210208 08:41:48.082"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:48.083" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:48.082" endtime="20210208 08:41:48.083"></status>
</kw>
<msg timestamp="20210208 08:41:48.083" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:48.080" endtime="20210208 08:41:48.083"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..title</arg>
</arguments>
<assign>
<var>${title}</var>
</assign>
<msg timestamp="20210208 08:41:48.114" level="INFO">${title} = ['sunt aut facere repellat provident occaecati excepturi optio reprehenderit']</msg>
<status status="PASS" starttime="20210208 08:41:48.083" endtime="20210208 08:41:48.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${title[0]}</arg>
<arg>${titleValue}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.114" endtime="20210208 08:41:48.115"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.048" endtime="20210208 08:41:48.115"></status>
</kw>
<doc>verifies success response along with title verification</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.047" endtime="20210208 08:41:48.115" critical="yes"></status>
</test>
<test id="s1-s1-t10" name="Check post for incorrect title with query parameter">
<kw name="GET post API response for incorrect title with query parameter" library="GetPostApi">
<arguments>
<arg>${INCORRECT_POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>title=${incorrectTitleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:48.117" level="INFO">${param} = {'title': '@abcd'}</msg>
<status status="PASS" starttime="20210208 08:41:48.116" endtime="20210208 08:41:48.117"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.145" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?title=%40abcd 
 path_url=/posts/?title=%40abcd 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.145" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?title=%40abcd 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '990', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'Accept-Ranges': 'bytes', 'cf-request-id': '08237991f80000e7483702e000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=8cqkR9474wmQAWx62%2BEfb3G6EpibpwvbRYBavo0n4p16Jatgw3IbE6f5JwS6yaTOThqBIK2nKp0%2BpOxyz2gjJuyvEMWTL97QRkL236zc7BFl2FyxFA7WoE1MOJb5"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c52ffa28e748-EWR'} 
 body=[] 
 </msg>
<msg timestamp="20210208 08:41:48.145" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.118" endtime="20210208 08:41:48.146"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:48.118" endtime="20210208 08:41:48.146"></status>
</kw>
<msg timestamp="20210208 08:41:48.146" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.117" endtime="20210208 08:41:48.146"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.148" endtime="20210208 08:41:48.149"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:48.149" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210208 08:41:48.149" endtime="20210208 08:41:48.149"></status>
</kw>
<msg timestamp="20210208 08:41:48.150" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210208 08:41:48.147" endtime="20210208 08:41:48.150"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210208 08:41:48.150" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210208 08:41:48.150" endtime="20210208 08:41:48.151"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.117" endtime="20210208 08:41:48.151"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.116" endtime="20210208 08:41:48.151"></status>
</kw>
<doc>verifies success along with empty response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.116" endtime="20210208 08:41:48.152" critical="yes"></status>
</test>
<test id="s1-s1-t11" name="Check post for specific post ID and title with query parameter">
<kw name="GET post API response for specific post ID and title with query parameter" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
<arg>${POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${postId[0]}</arg>
<arg>title=${titleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:48.156" level="INFO">${param} = {'id': '1', 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit'}</msg>
<status status="PASS" starttime="20210208 08:41:48.155" endtime="20210208 08:41:48.156"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.191" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?id=1&amp;title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 path_url=/posts/?id=1&amp;title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.191" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?id=1&amp;title=sunt+aut+facere+repellat+provident+occaecati+excepturi+optio+reprehenderit 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '989', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"134-QtF0EaiifRh1Z3cEspXIXV0RoQY"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '08237992210000e7483b1b3000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=wpJfTtnoiZQhUPFw6w4MuM%2FuzuUd7oCksYSbQVd4VbiWNA7pntH1RF8YNj3byWLiV3JO2vT3Ht1dDWCnbZPdz2%2FpcZXYeK6S15l4S71gAg3es2Ac%2B80CVbFpBF7v"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c5303a77e748-EWR', 'Content-Encoding': 'gzip'} 
 body=[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:48.191" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.157" endtime="20210208 08:41:48.191"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:48.157" endtime="20210208 08:41:48.192"></status>
</kw>
<msg timestamp="20210208 08:41:48.192" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.156" endtime="20210208 08:41:48.192"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.194" endtime="20210208 08:41:48.195"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:48.195" level="INFO">${jsonObject} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:48.195" endtime="20210208 08:41:48.196"></status>
</kw>
<msg timestamp="20210208 08:41:48.196" level="INFO">${jsonResponse} = [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderi...</msg>
<status status="PASS" starttime="20210208 08:41:48.193" endtime="20210208 08:41:48.196"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..title</arg>
</arguments>
<assign>
<var>${title}</var>
</assign>
<msg timestamp="20210208 08:41:48.227" level="INFO">${title} = ['sunt aut facere repellat provident occaecati excepturi optio reprehenderit']</msg>
<status status="PASS" starttime="20210208 08:41:48.196" endtime="20210208 08:41:48.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${title[0]}</arg>
<arg>${titleValue}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.227" endtime="20210208 08:41:48.228"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210208 08:41:48.250" level="INFO">${id} = [1]</msg>
<status status="PASS" starttime="20210208 08:41:48.228" endtime="20210208 08:41:48.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${id[0]}</arg>
<arg>${postId[0]}</arg>
</arguments>
<msg timestamp="20210208 08:41:48.250" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.250" endtime="20210208 08:41:48.250"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.154" endtime="20210208 08:41:48.251"></status>
</kw>
<doc>verifies success along with postid and title in response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.152" endtime="20210208 08:41:48.251" critical="yes"></status>
</test>
<test id="s1-s1-t12" name="Check post for incorrect post id and title with query parameter">
<kw name="GET post API response for incorrect post id and title with query parameter" library="GetPostApi">
<arguments>
<arg>${INVALID_POSTID}</arg>
<arg>${INCORRECT_POST_TITLE}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>id=${incorrectPostId[0]}</arg>
<arg>title=${incorrectTitleValue}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:48.253" level="INFO">${param} = {'id': '101', 'title': '@abcd'}</msg>
<status status="PASS" starttime="20210208 08:41:48.252" endtime="20210208 08:41:48.253"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.293" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/?id=101&amp;title=%40abcd 
 path_url=/posts/?id=101&amp;title=%40abcd 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.293" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/?id=101&amp;title=%40abcd 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '988', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'Accept-Ranges': 'bytes', 'cf-request-id': '082379927f0000e7483f1b1000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=ZOJhYoRA2NhMkfLgE3Vyk1JxB4ZH62ORNPJd2eDY%2F%2BYZmxVIbBHFwJ2P%2BmBtmljpNvtEtvu4MAUOQ3xAtG3Lcodym9Eb9T9b8inx88vvotVtVmp1oKaZ9zaLrTmh"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c530cb27e748-EWR'} 
 body=[] 
 </msg>
<msg timestamp="20210208 08:41:48.293" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.254" endtime="20210208 08:41:48.294"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:48.253" endtime="20210208 08:41:48.294"></status>
</kw>
<msg timestamp="20210208 08:41:48.294" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.253" endtime="20210208 08:41:48.294"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.295" endtime="20210208 08:41:48.296"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:48.297" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210208 08:41:48.296" endtime="20210208 08:41:48.297"></status>
</kw>
<msg timestamp="20210208 08:41:48.297" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210208 08:41:48.294" endtime="20210208 08:41:48.297"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210208 08:41:48.298" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210208 08:41:48.297" endtime="20210208 08:41:48.298"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.253" endtime="20210208 08:41:48.298"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.252" endtime="20210208 08:41:48.298"></status>
</kw>
<doc>Verifies success along with empty response</doc>
<tags>
<tag>postRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.251" endtime="20210208 08:41:48.298" critical="yes"></status>
</test>
<test id="s1-s1-t13" name="Check post comments for specific email id with query parameter">
<kw name="GET API response for post with specific email" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
<arg>${EMAIL}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>email=${validEmailId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:48.301" level="INFO">${param} = {'email': 'Hayden@althea.biz'}</msg>
<status status="PASS" starttime="20210208 08:41:48.301" endtime="20210208 08:41:48.301"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${POST_RESOURCE}${postId[0]}${COMMENTS_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId[0]}${COMMENTS_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.328" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=Hayden%40althea.biz 
 path_url=/posts/1/comments?email=Hayden%40althea.biz 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.329" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=Hayden%40althea.biz 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '987', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"116-P7BtySmelhRUOzIBE1sWWjNtSmw"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'cf-request-id': '08237992b10000e7483b1bc000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=Av8KYhDfdE2FcSVFSc%2FUBiG6rYcnue9PSExk0oid1veKWCJWFz9vaLBiHZurua8%2BuD7ejIq49gjw6oS0CGV1%2BPaZMLrSFY6Ikxg%2BQqGfe5ijM5dMd4wgJ5MBajaf"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c5311b8ae748-EWR', 'Content-Encoding': 'gzip'} 
 body=[
  {
    "postId": 1,
    "id": 5,
    "name": "vero eaque aliquid doloribus et culpa",
    "email": "Hayden@althea.biz",
    "body": "harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugit inventore cupiditate\nvoluptates magni quo et"
  }
] 
 </msg>
<msg timestamp="20210208 08:41:48.329" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.303" endtime="20210208 08:41:48.329"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:48.302" endtime="20210208 08:41:48.330"></status>
</kw>
<msg timestamp="20210208 08:41:48.330" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.301" endtime="20210208 08:41:48.330"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.332" endtime="20210208 08:41:48.333"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:48.333" level="INFO">${jsonObject} = [{'postId': 1, 'id': 5, 'name': 'vero eaque aliquid doloribus et culpa', 'email': 'Hayden@althea.biz', 'body': 'harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugi...</msg>
<status status="PASS" starttime="20210208 08:41:48.333" endtime="20210208 08:41:48.333"></status>
</kw>
<msg timestamp="20210208 08:41:48.334" level="INFO">${jsonResponse} = [{'postId': 1, 'id': 5, 'name': 'vero eaque aliquid doloribus et culpa', 'email': 'Hayden@althea.biz', 'body': 'harum non quasi et ratione\ntempore iure ex voluptates in ratione\nharum architecto fugi...</msg>
<status status="PASS" starttime="20210208 08:41:48.331" endtime="20210208 08:41:48.334"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${jsonResponse}</arg>
<arg>$..email</arg>
</arguments>
<assign>
<var>${emailId}</var>
</assign>
<msg timestamp="20210208 08:41:48.365" level="INFO">${emailId} = ['Hayden@althea.biz']</msg>
<status status="PASS" starttime="20210208 08:41:48.334" endtime="20210208 08:41:48.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${emailId[0]}</arg>
<arg>${validEmailId}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.365" endtime="20210208 08:41:48.366"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.300" endtime="20210208 08:41:48.366"></status>
</kw>
<doc>Verifies success response along with email id in response</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.299" endtime="20210208 08:41:48.366" critical="yes"></status>
</test>
<test id="s1-s1-t14" name="Check post comments response for incorrect email with query parameter">
<kw name="GET API response for all posts with incorrect email" library="GetPostApi">
<arguments>
<arg>${VALID_POSTID}</arg>
<arg>${INCORRECT_EMAIL}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>email=${incorrectEmailId}</arg>
</arguments>
<assign>
<var>${param}</var>
</assign>
<msg timestamp="20210208 08:41:48.368" level="INFO">${param} = {'email': 'abc@gmail.com'}</msg>
<status status="PASS" starttime="20210208 08:41:48.367" endtime="20210208 08:41:48.368"></status>
</kw>
<kw name="Verify incorrect Query Param" library="GetPostApi">
<arguments>
<arg>${POST_RESOURCE}${postId[0]}${COMMENTS_RESOURCE}</arg>
<arg>${param}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${GLOBAL_RETRY_AMOUNT}</arg>
<arg>${GLOBAL_RETRY_INTERVAL}</arg>
<arg>GET API request with param</arg>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="GET API request with param" library="GetPostApi">
<arguments>
<arg>${Uri}</arg>
<arg>${Param}</arg>
</arguments>
<kw name="Get On Session" library="RequestsLibrary">
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<arguments>
<arg>jsonplaceholder</arg>
<arg>url=${Uri}</arg>
<arg>params=${QueryParam}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210208 08:41:48.399" level="INFO">GET Request : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=abc%40gmail.com 
 path_url=/posts/1/comments?email=abc%40gmail.com 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '__cfduid=ddf19f34670624b84ec1895b16dc27c461612791707'} 
 body=None 
 </msg>
<msg timestamp="20210208 08:41:48.400" level="INFO">GET Response : url=http://jsonplaceholder.typicode.com/posts/1/comments?email=abc%40gmail.com 
 status=200, reason=OK 
 headers={'Date': 'Mon, 08 Feb 2021 13:41:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '986', 'X-Ratelimit-Reset': '1612791599', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '127', 'Accept-Ranges': 'bytes', 'cf-request-id': '08237992f30000e7485ca56000000001', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report?s=%2Bkc3hQrvXALD%2BMiiIv4o1RrQJhc4%2FA2Pc7H0HOqBBxNDC057ozTgHfe166btzkjkgCf31Xmwa32IuYUdHkbgpPBuNSKikNiTmOtpFXQzJ30YieW4h78Ev73LlcXC"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"report_to":"cf-nel","max_age":604800}', 'Server': 'cloudflare', 'CF-RAY': '61e5c5318c0be748-EWR'} 
 body=[] 
 </msg>
<msg timestamp="20210208 08:41:48.400" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.369" endtime="20210208 08:41:48.400"></status>
</kw>
<timeout value="2 seconds"></timeout>
<status status="PASS" starttime="20210208 08:41:48.369" endtime="20210208 08:41:48.401"></status>
</kw>
<msg timestamp="20210208 08:41:48.401" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210208 08:41:48.368" endtime="20210208 08:41:48.401"></status>
</kw>
<kw name="GET Json response" library="GetPostApi">
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>${jsonResponse}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code},${response.reason}</arg>
<arg>${GET_SUCCESS}</arg>
</arguments>
<status status="PASS" starttime="20210208 08:41:48.403" endtime="20210208 08:41:48.404"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${jsonObject}</var>
</assign>
<msg timestamp="20210208 08:41:48.405" level="INFO">${jsonObject} = []</msg>
<status status="PASS" starttime="20210208 08:41:48.404" endtime="20210208 08:41:48.405"></status>
</kw>
<msg timestamp="20210208 08:41:48.405" level="INFO">${jsonResponse} = []</msg>
<status status="PASS" starttime="20210208 08:41:48.401" endtime="20210208 08:41:48.405"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${jsonResponse}</arg>
</arguments>
<msg timestamp="20210208 08:41:48.406" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20210208 08:41:48.406" endtime="20210208 08:41:48.406"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.368" endtime="20210208 08:41:48.406"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.367" endtime="20210208 08:41:48.407"></status>
</kw>
<doc>verifies success along with empty response</doc>
<tags>
<tag>postCommentsRoute</tag>
</tags>
<status status="PASS" starttime="20210208 08:41:48.366" endtime="20210208 08:41:48.407" critical="yes"></status>
</test>
<kw name="Suite Teardown" library="Common" type="teardown">
<kw name="Delete All Sessions" library="RequestsLibrary">
<doc>Removes all the session objects</doc>
<msg timestamp="20210208 08:41:48.409" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20210208 08:41:48.409" endtime="20210208 08:41:48.409"></status>
</kw>
<status status="PASS" starttime="20210208 08:41:48.409" endtime="20210208 08:41:48.409"></status>
</kw>
<doc>To verify HTTP GET requests scenarios for /posts route.</doc>
<status status="PASS" starttime="20210208 08:41:47.024" endtime="20210208 08:41:48.410"></status>
</suite>
<status status="PASS" starttime="20210208 08:41:46.993" endtime="20210208 08:41:48.413"></status>
</suite>
<statistics>
<total>
<stat pass="14" fail="0">Critical Tests</stat>
<stat pass="14" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0">postCommentsRoute</stat>
<stat pass="10" fail="0">postRoute</stat>
</tag>
<suite>
<stat pass="14" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="14" fail="0" id="s1-s1" name="PostApiTest">Tests.PostApiTest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
